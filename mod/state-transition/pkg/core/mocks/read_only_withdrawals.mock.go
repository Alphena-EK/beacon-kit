// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ReadOnlyWithdrawals is an autogenerated mock type for the ReadOnlyWithdrawals type
type ReadOnlyWithdrawals[WithdrawalT any] struct {
	mock.Mock
}

type ReadOnlyWithdrawals_Expecter[WithdrawalT any] struct {
	mock *mock.Mock
}

func (_m *ReadOnlyWithdrawals[WithdrawalT]) EXPECT() *ReadOnlyWithdrawals_Expecter[WithdrawalT] {
	return &ReadOnlyWithdrawals_Expecter[WithdrawalT]{mock: &_m.Mock}
}

// ExpectedWithdrawals provides a mock function with given fields:
func (_m *ReadOnlyWithdrawals[WithdrawalT]) ExpectedWithdrawals() ([]WithdrawalT, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExpectedWithdrawals")
	}

	var r0 []WithdrawalT
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]WithdrawalT, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []WithdrawalT); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]WithdrawalT)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyWithdrawals_ExpectedWithdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpectedWithdrawals'
type ReadOnlyWithdrawals_ExpectedWithdrawals_Call[WithdrawalT any] struct {
	*mock.Call
}

// ExpectedWithdrawals is a helper method to define mock.On call
func (_e *ReadOnlyWithdrawals_Expecter[WithdrawalT]) ExpectedWithdrawals() *ReadOnlyWithdrawals_ExpectedWithdrawals_Call[WithdrawalT] {
	return &ReadOnlyWithdrawals_ExpectedWithdrawals_Call[WithdrawalT]{Call: _e.mock.On("ExpectedWithdrawals")}
}

func (_c *ReadOnlyWithdrawals_ExpectedWithdrawals_Call[WithdrawalT]) Run(run func()) *ReadOnlyWithdrawals_ExpectedWithdrawals_Call[WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyWithdrawals_ExpectedWithdrawals_Call[WithdrawalT]) Return(_a0 []WithdrawalT, _a1 error) *ReadOnlyWithdrawals_ExpectedWithdrawals_Call[WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyWithdrawals_ExpectedWithdrawals_Call[WithdrawalT]) RunAndReturn(run func() ([]WithdrawalT, error)) *ReadOnlyWithdrawals_ExpectedWithdrawals_Call[WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// NewReadOnlyWithdrawals creates a new instance of ReadOnlyWithdrawals. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadOnlyWithdrawals[WithdrawalT any](t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadOnlyWithdrawals[WithdrawalT] {
	mock := &ReadOnlyWithdrawals[WithdrawalT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
