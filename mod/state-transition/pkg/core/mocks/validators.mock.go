// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	common "github.com/berachain/beacon-kit/mod/primitives/pkg/common"

	mock "github.com/stretchr/testify/mock"
)

// Validators is an autogenerated mock type for the Validators type
type Validators struct {
	mock.Mock
}

type Validators_Expecter struct {
	mock *mock.Mock
}

func (_m *Validators) EXPECT() *Validators_Expecter {
	return &Validators_Expecter{mock: &_m.Mock}
}

// HashTreeRoot provides a mock function with given fields:
func (_m *Validators) HashTreeRoot() common.Root {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRoot")
	}

	var r0 common.Root
	if rf, ok := ret.Get(0).(func() common.Root); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Root)
		}
	}

	return r0
}

// Validators_HashTreeRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRoot'
type Validators_HashTreeRoot_Call struct {
	*mock.Call
}

// HashTreeRoot is a helper method to define mock.On call
func (_e *Validators_Expecter) HashTreeRoot() *Validators_HashTreeRoot_Call {
	return &Validators_HashTreeRoot_Call{Call: _e.mock.On("HashTreeRoot")}
}

func (_c *Validators_HashTreeRoot_Call) Run(run func()) *Validators_HashTreeRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validators_HashTreeRoot_Call) Return(_a0 common.Root) *Validators_HashTreeRoot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validators_HashTreeRoot_Call) RunAndReturn(run func() common.Root) *Validators_HashTreeRoot_Call {
	_c.Call.Return(run)
	return _c
}

// NewValidators creates a new instance of Validators. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidators(t interface {
	mock.TestingT
	Cleanup(func())
}) *Validators {
	mock := &Validators{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
