// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	common "github.com/berachain/beacon-kit/mod/primitives/pkg/common"

	eip4844 "github.com/berachain/beacon-kit/mod/primitives/pkg/eip4844"

	mock "github.com/stretchr/testify/mock"
)

// BlobSideCar is an autogenerated mock type for the BlobSideCar type
type BlobSideCar[BeaconBlockHeaderT any] struct {
	mock.Mock
}

type BlobSideCar_Expecter[BeaconBlockHeaderT any] struct {
	mock *mock.Mock
}

func (_m *BlobSideCar[BeaconBlockHeaderT]) EXPECT() *BlobSideCar_Expecter[BeaconBlockHeaderT] {
	return &BlobSideCar_Expecter[BeaconBlockHeaderT]{mock: &_m.Mock}
}

// GetBeaconBlockHeader provides a mock function with given fields:
func (_m *BlobSideCar[BeaconBlockHeaderT]) GetBeaconBlockHeader() BeaconBlockHeaderT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBeaconBlockHeader")
	}

	var r0 BeaconBlockHeaderT
	if rf, ok := ret.Get(0).(func() BeaconBlockHeaderT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(BeaconBlockHeaderT)
	}

	return r0
}

// BlobSideCar_GetBeaconBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBeaconBlockHeader'
type BlobSideCar_GetBeaconBlockHeader_Call[BeaconBlockHeaderT any] struct {
	*mock.Call
}

// GetBeaconBlockHeader is a helper method to define mock.On call
func (_e *BlobSideCar_Expecter[BeaconBlockHeaderT]) GetBeaconBlockHeader() *BlobSideCar_GetBeaconBlockHeader_Call[BeaconBlockHeaderT] {
	return &BlobSideCar_GetBeaconBlockHeader_Call[BeaconBlockHeaderT]{Call: _e.mock.On("GetBeaconBlockHeader")}
}

func (_c *BlobSideCar_GetBeaconBlockHeader_Call[BeaconBlockHeaderT]) Run(run func()) *BlobSideCar_GetBeaconBlockHeader_Call[BeaconBlockHeaderT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlobSideCar_GetBeaconBlockHeader_Call[BeaconBlockHeaderT]) Return(_a0 BeaconBlockHeaderT) *BlobSideCar_GetBeaconBlockHeader_Call[BeaconBlockHeaderT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlobSideCar_GetBeaconBlockHeader_Call[BeaconBlockHeaderT]) RunAndReturn(run func() BeaconBlockHeaderT) *BlobSideCar_GetBeaconBlockHeader_Call[BeaconBlockHeaderT] {
	_c.Call.Return(run)
	return _c
}

// GetBlob provides a mock function with given fields:
func (_m *BlobSideCar[BeaconBlockHeaderT]) GetBlob() eip4844.Blob {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlob")
	}

	var r0 eip4844.Blob
	if rf, ok := ret.Get(0).(func() eip4844.Blob); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eip4844.Blob)
		}
	}

	return r0
}

// BlobSideCar_GetBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlob'
type BlobSideCar_GetBlob_Call[BeaconBlockHeaderT any] struct {
	*mock.Call
}

// GetBlob is a helper method to define mock.On call
func (_e *BlobSideCar_Expecter[BeaconBlockHeaderT]) GetBlob() *BlobSideCar_GetBlob_Call[BeaconBlockHeaderT] {
	return &BlobSideCar_GetBlob_Call[BeaconBlockHeaderT]{Call: _e.mock.On("GetBlob")}
}

func (_c *BlobSideCar_GetBlob_Call[BeaconBlockHeaderT]) Run(run func()) *BlobSideCar_GetBlob_Call[BeaconBlockHeaderT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlobSideCar_GetBlob_Call[BeaconBlockHeaderT]) Return(_a0 eip4844.Blob) *BlobSideCar_GetBlob_Call[BeaconBlockHeaderT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlobSideCar_GetBlob_Call[BeaconBlockHeaderT]) RunAndReturn(run func() eip4844.Blob) *BlobSideCar_GetBlob_Call[BeaconBlockHeaderT] {
	_c.Call.Return(run)
	return _c
}

// GetInclusionProof provides a mock function with given fields:
func (_m *BlobSideCar[BeaconBlockHeaderT]) GetInclusionProof() []common.Root {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInclusionProof")
	}

	var r0 []common.Root
	if rf, ok := ret.Get(0).(func() []common.Root); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Root)
		}
	}

	return r0
}

// BlobSideCar_GetInclusionProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInclusionProof'
type BlobSideCar_GetInclusionProof_Call[BeaconBlockHeaderT any] struct {
	*mock.Call
}

// GetInclusionProof is a helper method to define mock.On call
func (_e *BlobSideCar_Expecter[BeaconBlockHeaderT]) GetInclusionProof() *BlobSideCar_GetInclusionProof_Call[BeaconBlockHeaderT] {
	return &BlobSideCar_GetInclusionProof_Call[BeaconBlockHeaderT]{Call: _e.mock.On("GetInclusionProof")}
}

func (_c *BlobSideCar_GetInclusionProof_Call[BeaconBlockHeaderT]) Run(run func()) *BlobSideCar_GetInclusionProof_Call[BeaconBlockHeaderT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlobSideCar_GetInclusionProof_Call[BeaconBlockHeaderT]) Return(_a0 []common.Root) *BlobSideCar_GetInclusionProof_Call[BeaconBlockHeaderT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlobSideCar_GetInclusionProof_Call[BeaconBlockHeaderT]) RunAndReturn(run func() []common.Root) *BlobSideCar_GetInclusionProof_Call[BeaconBlockHeaderT] {
	_c.Call.Return(run)
	return _c
}

// GetIndex provides a mock function with given fields:
func (_m *BlobSideCar[BeaconBlockHeaderT]) GetIndex() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIndex")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// BlobSideCar_GetIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndex'
type BlobSideCar_GetIndex_Call[BeaconBlockHeaderT any] struct {
	*mock.Call
}

// GetIndex is a helper method to define mock.On call
func (_e *BlobSideCar_Expecter[BeaconBlockHeaderT]) GetIndex() *BlobSideCar_GetIndex_Call[BeaconBlockHeaderT] {
	return &BlobSideCar_GetIndex_Call[BeaconBlockHeaderT]{Call: _e.mock.On("GetIndex")}
}

func (_c *BlobSideCar_GetIndex_Call[BeaconBlockHeaderT]) Run(run func()) *BlobSideCar_GetIndex_Call[BeaconBlockHeaderT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlobSideCar_GetIndex_Call[BeaconBlockHeaderT]) Return(_a0 uint64) *BlobSideCar_GetIndex_Call[BeaconBlockHeaderT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlobSideCar_GetIndex_Call[BeaconBlockHeaderT]) RunAndReturn(run func() uint64) *BlobSideCar_GetIndex_Call[BeaconBlockHeaderT] {
	_c.Call.Return(run)
	return _c
}

// GetKzgCommitment provides a mock function with given fields:
func (_m *BlobSideCar[BeaconBlockHeaderT]) GetKzgCommitment() eip4844.KZGCommitment {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetKzgCommitment")
	}

	var r0 eip4844.KZGCommitment
	if rf, ok := ret.Get(0).(func() eip4844.KZGCommitment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eip4844.KZGCommitment)
		}
	}

	return r0
}

// BlobSideCar_GetKzgCommitment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKzgCommitment'
type BlobSideCar_GetKzgCommitment_Call[BeaconBlockHeaderT any] struct {
	*mock.Call
}

// GetKzgCommitment is a helper method to define mock.On call
func (_e *BlobSideCar_Expecter[BeaconBlockHeaderT]) GetKzgCommitment() *BlobSideCar_GetKzgCommitment_Call[BeaconBlockHeaderT] {
	return &BlobSideCar_GetKzgCommitment_Call[BeaconBlockHeaderT]{Call: _e.mock.On("GetKzgCommitment")}
}

func (_c *BlobSideCar_GetKzgCommitment_Call[BeaconBlockHeaderT]) Run(run func()) *BlobSideCar_GetKzgCommitment_Call[BeaconBlockHeaderT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlobSideCar_GetKzgCommitment_Call[BeaconBlockHeaderT]) Return(_a0 eip4844.KZGCommitment) *BlobSideCar_GetKzgCommitment_Call[BeaconBlockHeaderT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlobSideCar_GetKzgCommitment_Call[BeaconBlockHeaderT]) RunAndReturn(run func() eip4844.KZGCommitment) *BlobSideCar_GetKzgCommitment_Call[BeaconBlockHeaderT] {
	_c.Call.Return(run)
	return _c
}

// GetKzgProof provides a mock function with given fields:
func (_m *BlobSideCar[BeaconBlockHeaderT]) GetKzgProof() bytes.B48 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetKzgProof")
	}

	var r0 bytes.B48
	if rf, ok := ret.Get(0).(func() bytes.B48); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B48)
		}
	}

	return r0
}

// BlobSideCar_GetKzgProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKzgProof'
type BlobSideCar_GetKzgProof_Call[BeaconBlockHeaderT any] struct {
	*mock.Call
}

// GetKzgProof is a helper method to define mock.On call
func (_e *BlobSideCar_Expecter[BeaconBlockHeaderT]) GetKzgProof() *BlobSideCar_GetKzgProof_Call[BeaconBlockHeaderT] {
	return &BlobSideCar_GetKzgProof_Call[BeaconBlockHeaderT]{Call: _e.mock.On("GetKzgProof")}
}

func (_c *BlobSideCar_GetKzgProof_Call[BeaconBlockHeaderT]) Run(run func()) *BlobSideCar_GetKzgProof_Call[BeaconBlockHeaderT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlobSideCar_GetKzgProof_Call[BeaconBlockHeaderT]) Return(_a0 bytes.B48) *BlobSideCar_GetKzgProof_Call[BeaconBlockHeaderT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlobSideCar_GetKzgProof_Call[BeaconBlockHeaderT]) RunAndReturn(run func() bytes.B48) *BlobSideCar_GetKzgProof_Call[BeaconBlockHeaderT] {
	_c.Call.Return(run)
	return _c
}

// NewBlobSideCar creates a new instance of BlobSideCar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlobSideCar[BeaconBlockHeaderT any](t interface {
	mock.TestingT
	Cleanup(func())
}) *BlobSideCar[BeaconBlockHeaderT] {
	mock := &BlobSideCar[BeaconBlockHeaderT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
