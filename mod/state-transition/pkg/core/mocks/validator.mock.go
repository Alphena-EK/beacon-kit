// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	common "github.com/berachain/beacon-kit/mod/primitives/pkg/common"

	crypto "github.com/berachain/beacon-kit/mod/primitives/pkg/crypto"

	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"
)

// Validator is an autogenerated mock type for the Validator type
type Validator[ValidatorT any, WithdrawalCredentialsT interface{ ~[32]byte }] struct {
	mock.Mock
}

type Validator_Expecter[ValidatorT any, WithdrawalCredentialsT interface{ ~[32]byte }] struct {
	mock *mock.Mock
}

func (_m *Validator[ValidatorT, WithdrawalCredentialsT]) EXPECT() *Validator_Expecter[ValidatorT, WithdrawalCredentialsT] {
	return &Validator_Expecter[ValidatorT, WithdrawalCredentialsT]{mock: &_m.Mock}
}

// GetEffectiveBalance provides a mock function with given fields:
func (_m *Validator[ValidatorT, WithdrawalCredentialsT]) GetEffectiveBalance() math.Gwei {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEffectiveBalance")
	}

	var r0 math.Gwei
	if rf, ok := ret.Get(0).(func() math.Gwei); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.Gwei)
	}

	return r0
}

// Validator_GetEffectiveBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEffectiveBalance'
type Validator_GetEffectiveBalance_Call[ValidatorT any, WithdrawalCredentialsT interface{ ~[32]byte }] struct {
	*mock.Call
}

// GetEffectiveBalance is a helper method to define mock.On call
func (_e *Validator_Expecter[ValidatorT, WithdrawalCredentialsT]) GetEffectiveBalance() *Validator_GetEffectiveBalance_Call[ValidatorT, WithdrawalCredentialsT] {
	return &Validator_GetEffectiveBalance_Call[ValidatorT, WithdrawalCredentialsT]{Call: _e.mock.On("GetEffectiveBalance")}
}

func (_c *Validator_GetEffectiveBalance_Call[ValidatorT, WithdrawalCredentialsT]) Run(run func()) *Validator_GetEffectiveBalance_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validator_GetEffectiveBalance_Call[ValidatorT, WithdrawalCredentialsT]) Return(_a0 math.Gwei) *Validator_GetEffectiveBalance_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_GetEffectiveBalance_Call[ValidatorT, WithdrawalCredentialsT]) RunAndReturn(run func() math.Gwei) *Validator_GetEffectiveBalance_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(run)
	return _c
}

// GetPubkey provides a mock function with given fields:
func (_m *Validator[ValidatorT, WithdrawalCredentialsT]) GetPubkey() crypto.BLSPubkey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPubkey")
	}

	var r0 crypto.BLSPubkey
	if rf, ok := ret.Get(0).(func() crypto.BLSPubkey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.BLSPubkey)
		}
	}

	return r0
}

// Validator_GetPubkey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPubkey'
type Validator_GetPubkey_Call[ValidatorT any, WithdrawalCredentialsT interface{ ~[32]byte }] struct {
	*mock.Call
}

// GetPubkey is a helper method to define mock.On call
func (_e *Validator_Expecter[ValidatorT, WithdrawalCredentialsT]) GetPubkey() *Validator_GetPubkey_Call[ValidatorT, WithdrawalCredentialsT] {
	return &Validator_GetPubkey_Call[ValidatorT, WithdrawalCredentialsT]{Call: _e.mock.On("GetPubkey")}
}

func (_c *Validator_GetPubkey_Call[ValidatorT, WithdrawalCredentialsT]) Run(run func()) *Validator_GetPubkey_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validator_GetPubkey_Call[ValidatorT, WithdrawalCredentialsT]) Return(_a0 crypto.BLSPubkey) *Validator_GetPubkey_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_GetPubkey_Call[ValidatorT, WithdrawalCredentialsT]) RunAndReturn(run func() crypto.BLSPubkey) *Validator_GetPubkey_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(run)
	return _c
}

// GetWithdrawableEpoch provides a mock function with given fields:
func (_m *Validator[ValidatorT, WithdrawalCredentialsT]) GetWithdrawableEpoch() math.Epoch {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawableEpoch")
	}

	var r0 math.Epoch
	if rf, ok := ret.Get(0).(func() math.Epoch); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.Epoch)
	}

	return r0
}

// Validator_GetWithdrawableEpoch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawableEpoch'
type Validator_GetWithdrawableEpoch_Call[ValidatorT any, WithdrawalCredentialsT interface{ ~[32]byte }] struct {
	*mock.Call
}

// GetWithdrawableEpoch is a helper method to define mock.On call
func (_e *Validator_Expecter[ValidatorT, WithdrawalCredentialsT]) GetWithdrawableEpoch() *Validator_GetWithdrawableEpoch_Call[ValidatorT, WithdrawalCredentialsT] {
	return &Validator_GetWithdrawableEpoch_Call[ValidatorT, WithdrawalCredentialsT]{Call: _e.mock.On("GetWithdrawableEpoch")}
}

func (_c *Validator_GetWithdrawableEpoch_Call[ValidatorT, WithdrawalCredentialsT]) Run(run func()) *Validator_GetWithdrawableEpoch_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validator_GetWithdrawableEpoch_Call[ValidatorT, WithdrawalCredentialsT]) Return(_a0 math.Epoch) *Validator_GetWithdrawableEpoch_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_GetWithdrawableEpoch_Call[ValidatorT, WithdrawalCredentialsT]) RunAndReturn(run func() math.Epoch) *Validator_GetWithdrawableEpoch_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(run)
	return _c
}

// HashTreeRoot provides a mock function with given fields:
func (_m *Validator[ValidatorT, WithdrawalCredentialsT]) HashTreeRoot() common.Root {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRoot")
	}

	var r0 common.Root
	if rf, ok := ret.Get(0).(func() common.Root); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Root)
		}
	}

	return r0
}

// Validator_HashTreeRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRoot'
type Validator_HashTreeRoot_Call[ValidatorT any, WithdrawalCredentialsT interface{ ~[32]byte }] struct {
	*mock.Call
}

// HashTreeRoot is a helper method to define mock.On call
func (_e *Validator_Expecter[ValidatorT, WithdrawalCredentialsT]) HashTreeRoot() *Validator_HashTreeRoot_Call[ValidatorT, WithdrawalCredentialsT] {
	return &Validator_HashTreeRoot_Call[ValidatorT, WithdrawalCredentialsT]{Call: _e.mock.On("HashTreeRoot")}
}

func (_c *Validator_HashTreeRoot_Call[ValidatorT, WithdrawalCredentialsT]) Run(run func()) *Validator_HashTreeRoot_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validator_HashTreeRoot_Call[ValidatorT, WithdrawalCredentialsT]) Return(_a0 common.Root) *Validator_HashTreeRoot_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_HashTreeRoot_Call[ValidatorT, WithdrawalCredentialsT]) RunAndReturn(run func() common.Root) *Validator_HashTreeRoot_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(run)
	return _c
}

// IsSlashed provides a mock function with given fields:
func (_m *Validator[ValidatorT, WithdrawalCredentialsT]) IsSlashed() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSlashed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Validator_IsSlashed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSlashed'
type Validator_IsSlashed_Call[ValidatorT any, WithdrawalCredentialsT interface{ ~[32]byte }] struct {
	*mock.Call
}

// IsSlashed is a helper method to define mock.On call
func (_e *Validator_Expecter[ValidatorT, WithdrawalCredentialsT]) IsSlashed() *Validator_IsSlashed_Call[ValidatorT, WithdrawalCredentialsT] {
	return &Validator_IsSlashed_Call[ValidatorT, WithdrawalCredentialsT]{Call: _e.mock.On("IsSlashed")}
}

func (_c *Validator_IsSlashed_Call[ValidatorT, WithdrawalCredentialsT]) Run(run func()) *Validator_IsSlashed_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validator_IsSlashed_Call[ValidatorT, WithdrawalCredentialsT]) Return(_a0 bool) *Validator_IsSlashed_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_IsSlashed_Call[ValidatorT, WithdrawalCredentialsT]) RunAndReturn(run func() bool) *Validator_IsSlashed_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZ provides a mock function with given fields:
func (_m *Validator[ValidatorT, WithdrawalCredentialsT]) MarshalSSZ() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZ")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validator_MarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZ'
type Validator_MarshalSSZ_Call[ValidatorT any, WithdrawalCredentialsT interface{ ~[32]byte }] struct {
	*mock.Call
}

// MarshalSSZ is a helper method to define mock.On call
func (_e *Validator_Expecter[ValidatorT, WithdrawalCredentialsT]) MarshalSSZ() *Validator_MarshalSSZ_Call[ValidatorT, WithdrawalCredentialsT] {
	return &Validator_MarshalSSZ_Call[ValidatorT, WithdrawalCredentialsT]{Call: _e.mock.On("MarshalSSZ")}
}

func (_c *Validator_MarshalSSZ_Call[ValidatorT, WithdrawalCredentialsT]) Run(run func()) *Validator_MarshalSSZ_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validator_MarshalSSZ_Call[ValidatorT, WithdrawalCredentialsT]) Return(_a0 []byte, _a1 error) *Validator_MarshalSSZ_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Validator_MarshalSSZ_Call[ValidatorT, WithdrawalCredentialsT]) RunAndReturn(run func() ([]byte, error)) *Validator_MarshalSSZ_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields: pubkey, withdrawalCredentials, amount, effectiveBalanceIncrement, maxEffectiveBalance
func (_m *Validator[ValidatorT, WithdrawalCredentialsT]) New(pubkey crypto.BLSPubkey, withdrawalCredentials WithdrawalCredentialsT, amount math.Gwei, effectiveBalanceIncrement math.Gwei, maxEffectiveBalance math.Gwei) ValidatorT {
	ret := _m.Called(pubkey, withdrawalCredentials, amount, effectiveBalanceIncrement, maxEffectiveBalance)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 ValidatorT
	if rf, ok := ret.Get(0).(func(crypto.BLSPubkey, WithdrawalCredentialsT, math.Gwei, math.Gwei, math.Gwei) ValidatorT); ok {
		r0 = rf(pubkey, withdrawalCredentials, amount, effectiveBalanceIncrement, maxEffectiveBalance)
	} else {
		r0 = ret.Get(0).(ValidatorT)
	}

	return r0
}

// Validator_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type Validator_New_Call[ValidatorT any, WithdrawalCredentialsT interface{ ~[32]byte }] struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - pubkey crypto.BLSPubkey
//   - withdrawalCredentials WithdrawalCredentialsT
//   - amount math.Gwei
//   - effectiveBalanceIncrement math.Gwei
//   - maxEffectiveBalance math.Gwei
func (_e *Validator_Expecter[ValidatorT, WithdrawalCredentialsT]) New(pubkey interface{}, withdrawalCredentials interface{}, amount interface{}, effectiveBalanceIncrement interface{}, maxEffectiveBalance interface{}) *Validator_New_Call[ValidatorT, WithdrawalCredentialsT] {
	return &Validator_New_Call[ValidatorT, WithdrawalCredentialsT]{Call: _e.mock.On("New", pubkey, withdrawalCredentials, amount, effectiveBalanceIncrement, maxEffectiveBalance)}
}

func (_c *Validator_New_Call[ValidatorT, WithdrawalCredentialsT]) Run(run func(pubkey crypto.BLSPubkey, withdrawalCredentials WithdrawalCredentialsT, amount math.Gwei, effectiveBalanceIncrement math.Gwei, maxEffectiveBalance math.Gwei)) *Validator_New_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(crypto.BLSPubkey), args[1].(WithdrawalCredentialsT), args[2].(math.Gwei), args[3].(math.Gwei), args[4].(math.Gwei))
	})
	return _c
}

func (_c *Validator_New_Call[ValidatorT, WithdrawalCredentialsT]) Return(_a0 ValidatorT) *Validator_New_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_New_Call[ValidatorT, WithdrawalCredentialsT]) RunAndReturn(run func(crypto.BLSPubkey, WithdrawalCredentialsT, math.Gwei, math.Gwei, math.Gwei) ValidatorT) *Validator_New_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(run)
	return _c
}

// SetEffectiveBalance provides a mock function with given fields: _a0
func (_m *Validator[ValidatorT, WithdrawalCredentialsT]) SetEffectiveBalance(_a0 math.Gwei) {
	_m.Called(_a0)
}

// Validator_SetEffectiveBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEffectiveBalance'
type Validator_SetEffectiveBalance_Call[ValidatorT any, WithdrawalCredentialsT interface{ ~[32]byte }] struct {
	*mock.Call
}

// SetEffectiveBalance is a helper method to define mock.On call
//   - _a0 math.Gwei
func (_e *Validator_Expecter[ValidatorT, WithdrawalCredentialsT]) SetEffectiveBalance(_a0 interface{}) *Validator_SetEffectiveBalance_Call[ValidatorT, WithdrawalCredentialsT] {
	return &Validator_SetEffectiveBalance_Call[ValidatorT, WithdrawalCredentialsT]{Call: _e.mock.On("SetEffectiveBalance", _a0)}
}

func (_c *Validator_SetEffectiveBalance_Call[ValidatorT, WithdrawalCredentialsT]) Run(run func(_a0 math.Gwei)) *Validator_SetEffectiveBalance_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.Gwei))
	})
	return _c
}

func (_c *Validator_SetEffectiveBalance_Call[ValidatorT, WithdrawalCredentialsT]) Return() *Validator_SetEffectiveBalance_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return()
	return _c
}

func (_c *Validator_SetEffectiveBalance_Call[ValidatorT, WithdrawalCredentialsT]) RunAndReturn(run func(math.Gwei)) *Validator_SetEffectiveBalance_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(run)
	return _c
}

// SizeSSZ provides a mock function with given fields:
func (_m *Validator[ValidatorT, WithdrawalCredentialsT]) SizeSSZ() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SizeSSZ")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// Validator_SizeSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SizeSSZ'
type Validator_SizeSSZ_Call[ValidatorT any, WithdrawalCredentialsT interface{ ~[32]byte }] struct {
	*mock.Call
}

// SizeSSZ is a helper method to define mock.On call
func (_e *Validator_Expecter[ValidatorT, WithdrawalCredentialsT]) SizeSSZ() *Validator_SizeSSZ_Call[ValidatorT, WithdrawalCredentialsT] {
	return &Validator_SizeSSZ_Call[ValidatorT, WithdrawalCredentialsT]{Call: _e.mock.On("SizeSSZ")}
}

func (_c *Validator_SizeSSZ_Call[ValidatorT, WithdrawalCredentialsT]) Run(run func()) *Validator_SizeSSZ_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validator_SizeSSZ_Call[ValidatorT, WithdrawalCredentialsT]) Return(_a0 uint32) *Validator_SizeSSZ_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_SizeSSZ_Call[ValidatorT, WithdrawalCredentialsT]) RunAndReturn(run func() uint32) *Validator_SizeSSZ_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(run)
	return _c
}

// UnmarshalSSZ provides a mock function with given fields: _a0
func (_m *Validator[ValidatorT, WithdrawalCredentialsT]) UnmarshalSSZ(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalSSZ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validator_UnmarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalSSZ'
type Validator_UnmarshalSSZ_Call[ValidatorT any, WithdrawalCredentialsT interface{ ~[32]byte }] struct {
	*mock.Call
}

// UnmarshalSSZ is a helper method to define mock.On call
//   - _a0 []byte
func (_e *Validator_Expecter[ValidatorT, WithdrawalCredentialsT]) UnmarshalSSZ(_a0 interface{}) *Validator_UnmarshalSSZ_Call[ValidatorT, WithdrawalCredentialsT] {
	return &Validator_UnmarshalSSZ_Call[ValidatorT, WithdrawalCredentialsT]{Call: _e.mock.On("UnmarshalSSZ", _a0)}
}

func (_c *Validator_UnmarshalSSZ_Call[ValidatorT, WithdrawalCredentialsT]) Run(run func(_a0 []byte)) *Validator_UnmarshalSSZ_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Validator_UnmarshalSSZ_Call[ValidatorT, WithdrawalCredentialsT]) Return(_a0 error) *Validator_UnmarshalSSZ_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_UnmarshalSSZ_Call[ValidatorT, WithdrawalCredentialsT]) RunAndReturn(run func([]byte) error) *Validator_UnmarshalSSZ_Call[ValidatorT, WithdrawalCredentialsT] {
	_c.Call.Return(run)
	return _c
}

// NewValidator creates a new instance of Validator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidator[ValidatorT any, WithdrawalCredentialsT interface{ ~[32]byte }](t interface {
	mock.TestingT
	Cleanup(func())
}) *Validator[ValidatorT, WithdrawalCredentialsT] {
	mock := &Validator[ValidatorT, WithdrawalCredentialsT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
