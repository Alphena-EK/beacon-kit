// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/berachain/beacon-kit/mod/primitives/pkg/common"

	crypto "github.com/berachain/beacon-kit/mod/primitives/pkg/crypto"

	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"
)

// BeaconState is an autogenerated mock type for the BeaconState type
type BeaconState[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	mock.Mock
}

type BeaconState_Expecter[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	mock *mock.Mock
}

func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) EXPECT() *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{mock: &_m.Mock}
}

// AddValidator provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) AddValidator(_a0 ValidatorT) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ValidatorT) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_AddValidator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddValidator'
type BeaconState_AddValidator_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// AddValidator is a helper method to define mock.On call
//   - _a0 ValidatorT
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) AddValidator(_a0 interface{}) *BeaconState_AddValidator_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_AddValidator_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("AddValidator", _a0)}
}

func (_c *BeaconState_AddValidator_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 ValidatorT)) *BeaconState_AddValidator_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ValidatorT))
	})
	return _c
}

func (_c *BeaconState_AddValidator_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_AddValidator_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_AddValidator_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(ValidatorT) error) *BeaconState_AddValidator_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// AddValidatorBartio provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) AddValidatorBartio(_a0 ValidatorT) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddValidatorBartio")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ValidatorT) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_AddValidatorBartio_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddValidatorBartio'
type BeaconState_AddValidatorBartio_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// AddValidatorBartio is a helper method to define mock.On call
//   - _a0 ValidatorT
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) AddValidatorBartio(_a0 interface{}) *BeaconState_AddValidatorBartio_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_AddValidatorBartio_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("AddValidatorBartio", _a0)}
}

func (_c *BeaconState_AddValidatorBartio_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 ValidatorT)) *BeaconState_AddValidatorBartio_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ValidatorT))
	})
	return _c
}

func (_c *BeaconState_AddValidatorBartio_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_AddValidatorBartio_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_AddValidatorBartio_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(ValidatorT) error) *BeaconState_AddValidatorBartio_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// BeaconState_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type BeaconState_Context_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Context() *BeaconState_Context_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_Context_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("Context")}
}

func (_c *BeaconState_Context_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_Context_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_Context_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 context.Context) *BeaconState_Context_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_Context_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() context.Context) *BeaconState_Context_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// Copy provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Copy() T {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func() T); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// BeaconState_Copy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Copy'
type BeaconState_Copy_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// Copy is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Copy() *BeaconState_Copy_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_Copy_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("Copy")}
}

func (_c *BeaconState_Copy_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_Copy_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_Copy_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 T) *BeaconState_Copy_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_Copy_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() T) *BeaconState_Copy_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// DecreaseBalance provides a mock function with given fields: _a0, _a1
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) DecreaseBalance(_a0 math.ValidatorIndex, _a1 math.Gwei) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DecreaseBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.ValidatorIndex, math.Gwei) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_DecreaseBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecreaseBalance'
type BeaconState_DecreaseBalance_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// DecreaseBalance is a helper method to define mock.On call
//   - _a0 math.ValidatorIndex
//   - _a1 math.Gwei
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) DecreaseBalance(_a0 interface{}, _a1 interface{}) *BeaconState_DecreaseBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_DecreaseBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("DecreaseBalance", _a0, _a1)}
}

func (_c *BeaconState_DecreaseBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 math.ValidatorIndex, _a1 math.Gwei)) *BeaconState_DecreaseBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.ValidatorIndex), args[1].(math.Gwei))
	})
	return _c
}

func (_c *BeaconState_DecreaseBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_DecreaseBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_DecreaseBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(math.ValidatorIndex, math.Gwei) error) *BeaconState_DecreaseBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// ExpectedWithdrawals provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) ExpectedWithdrawals() ([]WithdrawalT, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExpectedWithdrawals")
	}

	var r0 []WithdrawalT
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]WithdrawalT, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []WithdrawalT); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]WithdrawalT)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_ExpectedWithdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpectedWithdrawals'
type BeaconState_ExpectedWithdrawals_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// ExpectedWithdrawals is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) ExpectedWithdrawals() *BeaconState_ExpectedWithdrawals_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_ExpectedWithdrawals_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("ExpectedWithdrawals")}
}

func (_c *BeaconState_ExpectedWithdrawals_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_ExpectedWithdrawals_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_ExpectedWithdrawals_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 []WithdrawalT, _a1 error) *BeaconState_ExpectedWithdrawals_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_ExpectedWithdrawals_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() ([]WithdrawalT, error)) *BeaconState_ExpectedWithdrawals_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetBalance(_a0 math.ValidatorIndex) (math.Gwei, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 math.Gwei
	var r1 error
	if rf, ok := ret.Get(0).(func(math.ValidatorIndex) (math.Gwei, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(math.ValidatorIndex) math.Gwei); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(math.Gwei)
	}

	if rf, ok := ret.Get(1).(func(math.ValidatorIndex) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type BeaconState_GetBalance_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - _a0 math.ValidatorIndex
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetBalance(_a0 interface{}) *BeaconState_GetBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetBalance", _a0)}
}

func (_c *BeaconState_GetBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 math.ValidatorIndex)) *BeaconState_GetBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.ValidatorIndex))
	})
	return _c
}

func (_c *BeaconState_GetBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 math.Gwei, _a1 error) *BeaconState_GetBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(math.ValidatorIndex) (math.Gwei, error)) *BeaconState_GetBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetBlockRootAtIndex provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetBlockRootAtIndex(_a0 uint64) (common.Root, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockRootAtIndex")
	}

	var r0 common.Root
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (common.Root, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) common.Root); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Root)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetBlockRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockRootAtIndex'
type BeaconState_GetBlockRootAtIndex_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetBlockRootAtIndex is a helper method to define mock.On call
//   - _a0 uint64
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetBlockRootAtIndex(_a0 interface{}) *BeaconState_GetBlockRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetBlockRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetBlockRootAtIndex", _a0)}
}

func (_c *BeaconState_GetBlockRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 uint64)) *BeaconState_GetBlockRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *BeaconState_GetBlockRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 common.Root, _a1 error) *BeaconState_GetBlockRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetBlockRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(uint64) (common.Root, error)) *BeaconState_GetBlockRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetEth1Data provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetEth1Data() (Eth1DataT, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEth1Data")
	}

	var r0 Eth1DataT
	var r1 error
	if rf, ok := ret.Get(0).(func() (Eth1DataT, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() Eth1DataT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Eth1DataT)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetEth1Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEth1Data'
type BeaconState_GetEth1Data_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetEth1Data is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetEth1Data() *BeaconState_GetEth1Data_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetEth1Data_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetEth1Data")}
}

func (_c *BeaconState_GetEth1Data_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_GetEth1Data_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetEth1Data_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 Eth1DataT, _a1 error) *BeaconState_GetEth1Data_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetEth1Data_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() (Eth1DataT, error)) *BeaconState_GetEth1Data_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetEth1DepositIndex provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetEth1DepositIndex() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEth1DepositIndex")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetEth1DepositIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEth1DepositIndex'
type BeaconState_GetEth1DepositIndex_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetEth1DepositIndex is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetEth1DepositIndex() *BeaconState_GetEth1DepositIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetEth1DepositIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetEth1DepositIndex")}
}

func (_c *BeaconState_GetEth1DepositIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_GetEth1DepositIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetEth1DepositIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 uint64, _a1 error) *BeaconState_GetEth1DepositIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetEth1DepositIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() (uint64, error)) *BeaconState_GetEth1DepositIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetFork provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetFork() (ForkT, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFork")
	}

	var r0 ForkT
	var r1 error
	if rf, ok := ret.Get(0).(func() (ForkT, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() ForkT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ForkT)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetFork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFork'
type BeaconState_GetFork_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetFork is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetFork() *BeaconState_GetFork_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetFork_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetFork")}
}

func (_c *BeaconState_GetFork_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_GetFork_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetFork_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 ForkT, _a1 error) *BeaconState_GetFork_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetFork_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() (ForkT, error)) *BeaconState_GetFork_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetGenesisValidatorsRoot provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetGenesisValidatorsRoot() (common.Root, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGenesisValidatorsRoot")
	}

	var r0 common.Root
	var r1 error
	if rf, ok := ret.Get(0).(func() (common.Root, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() common.Root); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Root)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetGenesisValidatorsRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGenesisValidatorsRoot'
type BeaconState_GetGenesisValidatorsRoot_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetGenesisValidatorsRoot is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetGenesisValidatorsRoot() *BeaconState_GetGenesisValidatorsRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetGenesisValidatorsRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetGenesisValidatorsRoot")}
}

func (_c *BeaconState_GetGenesisValidatorsRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_GetGenesisValidatorsRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetGenesisValidatorsRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 common.Root, _a1 error) *BeaconState_GetGenesisValidatorsRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetGenesisValidatorsRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() (common.Root, error)) *BeaconState_GetGenesisValidatorsRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlockHeader provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetLatestBlockHeader() (BeaconBlockHeaderT, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockHeader")
	}

	var r0 BeaconBlockHeaderT
	var r1 error
	if rf, ok := ret.Get(0).(func() (BeaconBlockHeaderT, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() BeaconBlockHeaderT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(BeaconBlockHeaderT)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetLatestBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlockHeader'
type BeaconState_GetLatestBlockHeader_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetLatestBlockHeader is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetLatestBlockHeader() *BeaconState_GetLatestBlockHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetLatestBlockHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetLatestBlockHeader")}
}

func (_c *BeaconState_GetLatestBlockHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_GetLatestBlockHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetLatestBlockHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 BeaconBlockHeaderT, _a1 error) *BeaconState_GetLatestBlockHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetLatestBlockHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() (BeaconBlockHeaderT, error)) *BeaconState_GetLatestBlockHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetLatestExecutionPayloadHeader provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetLatestExecutionPayloadHeader() (ExecutionPayloadHeaderT, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestExecutionPayloadHeader")
	}

	var r0 ExecutionPayloadHeaderT
	var r1 error
	if rf, ok := ret.Get(0).(func() (ExecutionPayloadHeaderT, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() ExecutionPayloadHeaderT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ExecutionPayloadHeaderT)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetLatestExecutionPayloadHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestExecutionPayloadHeader'
type BeaconState_GetLatestExecutionPayloadHeader_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetLatestExecutionPayloadHeader is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetLatestExecutionPayloadHeader() *BeaconState_GetLatestExecutionPayloadHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetLatestExecutionPayloadHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetLatestExecutionPayloadHeader")}
}

func (_c *BeaconState_GetLatestExecutionPayloadHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_GetLatestExecutionPayloadHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetLatestExecutionPayloadHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 ExecutionPayloadHeaderT, _a1 error) *BeaconState_GetLatestExecutionPayloadHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetLatestExecutionPayloadHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() (ExecutionPayloadHeaderT, error)) *BeaconState_GetLatestExecutionPayloadHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetNextWithdrawalIndex provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetNextWithdrawalIndex() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNextWithdrawalIndex")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetNextWithdrawalIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextWithdrawalIndex'
type BeaconState_GetNextWithdrawalIndex_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetNextWithdrawalIndex is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetNextWithdrawalIndex() *BeaconState_GetNextWithdrawalIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetNextWithdrawalIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetNextWithdrawalIndex")}
}

func (_c *BeaconState_GetNextWithdrawalIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_GetNextWithdrawalIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetNextWithdrawalIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 uint64, _a1 error) *BeaconState_GetNextWithdrawalIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetNextWithdrawalIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() (uint64, error)) *BeaconState_GetNextWithdrawalIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetNextWithdrawalValidatorIndex provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetNextWithdrawalValidatorIndex() (math.ValidatorIndex, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNextWithdrawalValidatorIndex")
	}

	var r0 math.ValidatorIndex
	var r1 error
	if rf, ok := ret.Get(0).(func() (math.ValidatorIndex, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() math.ValidatorIndex); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.ValidatorIndex)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetNextWithdrawalValidatorIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextWithdrawalValidatorIndex'
type BeaconState_GetNextWithdrawalValidatorIndex_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetNextWithdrawalValidatorIndex is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetNextWithdrawalValidatorIndex() *BeaconState_GetNextWithdrawalValidatorIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetNextWithdrawalValidatorIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetNextWithdrawalValidatorIndex")}
}

func (_c *BeaconState_GetNextWithdrawalValidatorIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_GetNextWithdrawalValidatorIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetNextWithdrawalValidatorIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 math.ValidatorIndex, _a1 error) *BeaconState_GetNextWithdrawalValidatorIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetNextWithdrawalValidatorIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() (math.ValidatorIndex, error)) *BeaconState_GetNextWithdrawalValidatorIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetRandaoMixAtIndex provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetRandaoMixAtIndex(_a0 uint64) (common.Bytes32, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetRandaoMixAtIndex")
	}

	var r0 common.Bytes32
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (common.Bytes32, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) common.Bytes32); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Bytes32)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetRandaoMixAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandaoMixAtIndex'
type BeaconState_GetRandaoMixAtIndex_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetRandaoMixAtIndex is a helper method to define mock.On call
//   - _a0 uint64
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetRandaoMixAtIndex(_a0 interface{}) *BeaconState_GetRandaoMixAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetRandaoMixAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetRandaoMixAtIndex", _a0)}
}

func (_c *BeaconState_GetRandaoMixAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 uint64)) *BeaconState_GetRandaoMixAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *BeaconState_GetRandaoMixAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 common.Bytes32, _a1 error) *BeaconState_GetRandaoMixAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetRandaoMixAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(uint64) (common.Bytes32, error)) *BeaconState_GetRandaoMixAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetSlashingAtIndex provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetSlashingAtIndex(_a0 uint64) (math.Gwei, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetSlashingAtIndex")
	}

	var r0 math.Gwei
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (math.Gwei, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) math.Gwei); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(math.Gwei)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetSlashingAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlashingAtIndex'
type BeaconState_GetSlashingAtIndex_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetSlashingAtIndex is a helper method to define mock.On call
//   - _a0 uint64
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetSlashingAtIndex(_a0 interface{}) *BeaconState_GetSlashingAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetSlashingAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetSlashingAtIndex", _a0)}
}

func (_c *BeaconState_GetSlashingAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 uint64)) *BeaconState_GetSlashingAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *BeaconState_GetSlashingAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 math.Gwei, _a1 error) *BeaconState_GetSlashingAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetSlashingAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(uint64) (math.Gwei, error)) *BeaconState_GetSlashingAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetSlot provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetSlot() (math.Slot, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSlot")
	}

	var r0 math.Slot
	var r1 error
	if rf, ok := ret.Get(0).(func() (math.Slot, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() math.Slot); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.Slot)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlot'
type BeaconState_GetSlot_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetSlot is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetSlot() *BeaconState_GetSlot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetSlot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetSlot")}
}

func (_c *BeaconState_GetSlot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_GetSlot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetSlot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 math.Slot, _a1 error) *BeaconState_GetSlot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetSlot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() (math.Slot, error)) *BeaconState_GetSlot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetTotalActiveBalances provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetTotalActiveBalances(_a0 uint64) (math.Gwei, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalActiveBalances")
	}

	var r0 math.Gwei
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (math.Gwei, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) math.Gwei); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(math.Gwei)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetTotalActiveBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalActiveBalances'
type BeaconState_GetTotalActiveBalances_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetTotalActiveBalances is a helper method to define mock.On call
//   - _a0 uint64
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetTotalActiveBalances(_a0 interface{}) *BeaconState_GetTotalActiveBalances_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetTotalActiveBalances_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetTotalActiveBalances", _a0)}
}

func (_c *BeaconState_GetTotalActiveBalances_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 uint64)) *BeaconState_GetTotalActiveBalances_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *BeaconState_GetTotalActiveBalances_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 math.Gwei, _a1 error) *BeaconState_GetTotalActiveBalances_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetTotalActiveBalances_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(uint64) (math.Gwei, error)) *BeaconState_GetTotalActiveBalances_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetTotalSlashing provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetTotalSlashing() (math.Gwei, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalSlashing")
	}

	var r0 math.Gwei
	var r1 error
	if rf, ok := ret.Get(0).(func() (math.Gwei, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() math.Gwei); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.Gwei)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetTotalSlashing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalSlashing'
type BeaconState_GetTotalSlashing_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetTotalSlashing is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetTotalSlashing() *BeaconState_GetTotalSlashing_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetTotalSlashing_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetTotalSlashing")}
}

func (_c *BeaconState_GetTotalSlashing_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_GetTotalSlashing_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetTotalSlashing_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 math.Gwei, _a1 error) *BeaconState_GetTotalSlashing_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetTotalSlashing_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() (math.Gwei, error)) *BeaconState_GetTotalSlashing_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetTotalValidators provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetTotalValidators() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalValidators")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetTotalValidators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalValidators'
type BeaconState_GetTotalValidators_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetTotalValidators is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetTotalValidators() *BeaconState_GetTotalValidators_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetTotalValidators_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetTotalValidators")}
}

func (_c *BeaconState_GetTotalValidators_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_GetTotalValidators_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetTotalValidators_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 uint64, _a1 error) *BeaconState_GetTotalValidators_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetTotalValidators_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() (uint64, error)) *BeaconState_GetTotalValidators_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetValidators provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetValidators() (ValidatorsT, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValidators")
	}

	var r0 ValidatorsT
	var r1 error
	if rf, ok := ret.Get(0).(func() (ValidatorsT, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() ValidatorsT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ValidatorsT)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetValidators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidators'
type BeaconState_GetValidators_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetValidators is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetValidators() *BeaconState_GetValidators_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetValidators_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetValidators")}
}

func (_c *BeaconState_GetValidators_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_GetValidators_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetValidators_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 ValidatorsT, _a1 error) *BeaconState_GetValidators_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetValidators_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() (ValidatorsT, error)) *BeaconState_GetValidators_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetValidatorsByEffectiveBalance provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetValidatorsByEffectiveBalance() ([]ValidatorT, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorsByEffectiveBalance")
	}

	var r0 []ValidatorT
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]ValidatorT, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []ValidatorT); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ValidatorT)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_GetValidatorsByEffectiveBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidatorsByEffectiveBalance'
type BeaconState_GetValidatorsByEffectiveBalance_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// GetValidatorsByEffectiveBalance is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) GetValidatorsByEffectiveBalance() *BeaconState_GetValidatorsByEffectiveBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_GetValidatorsByEffectiveBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("GetValidatorsByEffectiveBalance")}
}

func (_c *BeaconState_GetValidatorsByEffectiveBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_GetValidatorsByEffectiveBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_GetValidatorsByEffectiveBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 []ValidatorT, _a1 error) *BeaconState_GetValidatorsByEffectiveBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_GetValidatorsByEffectiveBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() ([]ValidatorT, error)) *BeaconState_GetValidatorsByEffectiveBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// HashTreeRoot provides a mock function with given fields:
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) HashTreeRoot() common.Root {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRoot")
	}

	var r0 common.Root
	if rf, ok := ret.Get(0).(func() common.Root); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Root)
		}
	}

	return r0
}

// BeaconState_HashTreeRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRoot'
type BeaconState_HashTreeRoot_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// HashTreeRoot is a helper method to define mock.On call
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) HashTreeRoot() *BeaconState_HashTreeRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_HashTreeRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("HashTreeRoot")}
}

func (_c *BeaconState_HashTreeRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func()) *BeaconState_HashTreeRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconState_HashTreeRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 common.Root) *BeaconState_HashTreeRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_HashTreeRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func() common.Root) *BeaconState_HashTreeRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// IncreaseBalance provides a mock function with given fields: _a0, _a1
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) IncreaseBalance(_a0 math.ValidatorIndex, _a1 math.Gwei) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for IncreaseBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.ValidatorIndex, math.Gwei) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_IncreaseBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncreaseBalance'
type BeaconState_IncreaseBalance_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// IncreaseBalance is a helper method to define mock.On call
//   - _a0 math.ValidatorIndex
//   - _a1 math.Gwei
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) IncreaseBalance(_a0 interface{}, _a1 interface{}) *BeaconState_IncreaseBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_IncreaseBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("IncreaseBalance", _a0, _a1)}
}

func (_c *BeaconState_IncreaseBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 math.ValidatorIndex, _a1 math.Gwei)) *BeaconState_IncreaseBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.ValidatorIndex), args[1].(math.Gwei))
	})
	return _c
}

func (_c *BeaconState_IncreaseBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_IncreaseBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_IncreaseBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(math.ValidatorIndex, math.Gwei) error) *BeaconState_IncreaseBalance_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// NewFromDB provides a mock function with given fields: bdb, cs
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) NewFromDB(bdb KVStoreT, cs common.ChainSpec) T {
	ret := _m.Called(bdb, cs)

	if len(ret) == 0 {
		panic("no return value specified for NewFromDB")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func(KVStoreT, common.ChainSpec) T); ok {
		r0 = rf(bdb, cs)
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// BeaconState_NewFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewFromDB'
type BeaconState_NewFromDB_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// NewFromDB is a helper method to define mock.On call
//   - bdb KVStoreT
//   - cs common.ChainSpec
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) NewFromDB(bdb interface{}, cs interface{}) *BeaconState_NewFromDB_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_NewFromDB_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("NewFromDB", bdb, cs)}
}

func (_c *BeaconState_NewFromDB_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(bdb KVStoreT, cs common.ChainSpec)) *BeaconState_NewFromDB_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(KVStoreT), args[1].(common.ChainSpec))
	})
	return _c
}

func (_c *BeaconState_NewFromDB_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 T) *BeaconState_NewFromDB_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_NewFromDB_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(KVStoreT, common.ChainSpec) T) *BeaconState_NewFromDB_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// SetEth1Data provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetEth1Data(_a0 Eth1DataT) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetEth1Data")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Eth1DataT) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetEth1Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEth1Data'
type BeaconState_SetEth1Data_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// SetEth1Data is a helper method to define mock.On call
//   - _a0 Eth1DataT
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetEth1Data(_a0 interface{}) *BeaconState_SetEth1Data_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_SetEth1Data_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("SetEth1Data", _a0)}
}

func (_c *BeaconState_SetEth1Data_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 Eth1DataT)) *BeaconState_SetEth1Data_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Eth1DataT))
	})
	return _c
}

func (_c *BeaconState_SetEth1Data_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_SetEth1Data_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetEth1Data_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(Eth1DataT) error) *BeaconState_SetEth1Data_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// SetEth1DepositIndex provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetEth1DepositIndex(_a0 uint64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetEth1DepositIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetEth1DepositIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEth1DepositIndex'
type BeaconState_SetEth1DepositIndex_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// SetEth1DepositIndex is a helper method to define mock.On call
//   - _a0 uint64
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetEth1DepositIndex(_a0 interface{}) *BeaconState_SetEth1DepositIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_SetEth1DepositIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("SetEth1DepositIndex", _a0)}
}

func (_c *BeaconState_SetEth1DepositIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 uint64)) *BeaconState_SetEth1DepositIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *BeaconState_SetEth1DepositIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_SetEth1DepositIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetEth1DepositIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(uint64) error) *BeaconState_SetEth1DepositIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// SetFork provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetFork(_a0 ForkT) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetFork")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ForkT) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetFork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFork'
type BeaconState_SetFork_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// SetFork is a helper method to define mock.On call
//   - _a0 ForkT
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetFork(_a0 interface{}) *BeaconState_SetFork_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_SetFork_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("SetFork", _a0)}
}

func (_c *BeaconState_SetFork_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 ForkT)) *BeaconState_SetFork_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ForkT))
	})
	return _c
}

func (_c *BeaconState_SetFork_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_SetFork_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetFork_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(ForkT) error) *BeaconState_SetFork_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// SetGenesisValidatorsRoot provides a mock function with given fields: root
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetGenesisValidatorsRoot(root common.Root) error {
	ret := _m.Called(root)

	if len(ret) == 0 {
		panic("no return value specified for SetGenesisValidatorsRoot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Root) error); ok {
		r0 = rf(root)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetGenesisValidatorsRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGenesisValidatorsRoot'
type BeaconState_SetGenesisValidatorsRoot_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// SetGenesisValidatorsRoot is a helper method to define mock.On call
//   - root common.Root
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetGenesisValidatorsRoot(root interface{}) *BeaconState_SetGenesisValidatorsRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_SetGenesisValidatorsRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("SetGenesisValidatorsRoot", root)}
}

func (_c *BeaconState_SetGenesisValidatorsRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(root common.Root)) *BeaconState_SetGenesisValidatorsRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Root))
	})
	return _c
}

func (_c *BeaconState_SetGenesisValidatorsRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_SetGenesisValidatorsRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetGenesisValidatorsRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(common.Root) error) *BeaconState_SetGenesisValidatorsRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// SetLatestBlockHeader provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetLatestBlockHeader(_a0 BeaconBlockHeaderT) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetLatestBlockHeader")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BeaconBlockHeaderT) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetLatestBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLatestBlockHeader'
type BeaconState_SetLatestBlockHeader_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// SetLatestBlockHeader is a helper method to define mock.On call
//   - _a0 BeaconBlockHeaderT
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetLatestBlockHeader(_a0 interface{}) *BeaconState_SetLatestBlockHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_SetLatestBlockHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("SetLatestBlockHeader", _a0)}
}

func (_c *BeaconState_SetLatestBlockHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 BeaconBlockHeaderT)) *BeaconState_SetLatestBlockHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BeaconBlockHeaderT))
	})
	return _c
}

func (_c *BeaconState_SetLatestBlockHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_SetLatestBlockHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetLatestBlockHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(BeaconBlockHeaderT) error) *BeaconState_SetLatestBlockHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// SetLatestExecutionPayloadHeader provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetLatestExecutionPayloadHeader(_a0 ExecutionPayloadHeaderT) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetLatestExecutionPayloadHeader")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ExecutionPayloadHeaderT) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetLatestExecutionPayloadHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLatestExecutionPayloadHeader'
type BeaconState_SetLatestExecutionPayloadHeader_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// SetLatestExecutionPayloadHeader is a helper method to define mock.On call
//   - _a0 ExecutionPayloadHeaderT
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetLatestExecutionPayloadHeader(_a0 interface{}) *BeaconState_SetLatestExecutionPayloadHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_SetLatestExecutionPayloadHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("SetLatestExecutionPayloadHeader", _a0)}
}

func (_c *BeaconState_SetLatestExecutionPayloadHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 ExecutionPayloadHeaderT)) *BeaconState_SetLatestExecutionPayloadHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ExecutionPayloadHeaderT))
	})
	return _c
}

func (_c *BeaconState_SetLatestExecutionPayloadHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_SetLatestExecutionPayloadHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetLatestExecutionPayloadHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(ExecutionPayloadHeaderT) error) *BeaconState_SetLatestExecutionPayloadHeader_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// SetNextWithdrawalIndex provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetNextWithdrawalIndex(_a0 uint64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetNextWithdrawalIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetNextWithdrawalIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNextWithdrawalIndex'
type BeaconState_SetNextWithdrawalIndex_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// SetNextWithdrawalIndex is a helper method to define mock.On call
//   - _a0 uint64
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetNextWithdrawalIndex(_a0 interface{}) *BeaconState_SetNextWithdrawalIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_SetNextWithdrawalIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("SetNextWithdrawalIndex", _a0)}
}

func (_c *BeaconState_SetNextWithdrawalIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 uint64)) *BeaconState_SetNextWithdrawalIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *BeaconState_SetNextWithdrawalIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_SetNextWithdrawalIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetNextWithdrawalIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(uint64) error) *BeaconState_SetNextWithdrawalIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// SetNextWithdrawalValidatorIndex provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetNextWithdrawalValidatorIndex(_a0 math.ValidatorIndex) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetNextWithdrawalValidatorIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.ValidatorIndex) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetNextWithdrawalValidatorIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNextWithdrawalValidatorIndex'
type BeaconState_SetNextWithdrawalValidatorIndex_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// SetNextWithdrawalValidatorIndex is a helper method to define mock.On call
//   - _a0 math.ValidatorIndex
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetNextWithdrawalValidatorIndex(_a0 interface{}) *BeaconState_SetNextWithdrawalValidatorIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_SetNextWithdrawalValidatorIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("SetNextWithdrawalValidatorIndex", _a0)}
}

func (_c *BeaconState_SetNextWithdrawalValidatorIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 math.ValidatorIndex)) *BeaconState_SetNextWithdrawalValidatorIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.ValidatorIndex))
	})
	return _c
}

func (_c *BeaconState_SetNextWithdrawalValidatorIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_SetNextWithdrawalValidatorIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetNextWithdrawalValidatorIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(math.ValidatorIndex) error) *BeaconState_SetNextWithdrawalValidatorIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// SetSlot provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetSlot(_a0 math.Slot) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetSlot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.Slot) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSlot'
type BeaconState_SetSlot_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// SetSlot is a helper method to define mock.On call
//   - _a0 math.Slot
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetSlot(_a0 interface{}) *BeaconState_SetSlot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_SetSlot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("SetSlot", _a0)}
}

func (_c *BeaconState_SetSlot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 math.Slot)) *BeaconState_SetSlot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.Slot))
	})
	return _c
}

func (_c *BeaconState_SetSlot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_SetSlot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetSlot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(math.Slot) error) *BeaconState_SetSlot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// SetTotalSlashing provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetTotalSlashing(_a0 math.Gwei) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetTotalSlashing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.Gwei) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_SetTotalSlashing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTotalSlashing'
type BeaconState_SetTotalSlashing_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// SetTotalSlashing is a helper method to define mock.On call
//   - _a0 math.Gwei
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) SetTotalSlashing(_a0 interface{}) *BeaconState_SetTotalSlashing_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_SetTotalSlashing_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("SetTotalSlashing", _a0)}
}

func (_c *BeaconState_SetTotalSlashing_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 math.Gwei)) *BeaconState_SetTotalSlashing_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.Gwei))
	})
	return _c
}

func (_c *BeaconState_SetTotalSlashing_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_SetTotalSlashing_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_SetTotalSlashing_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(math.Gwei) error) *BeaconState_SetTotalSlashing_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// StateRootAtIndex provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) StateRootAtIndex(_a0 uint64) (common.Root, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for StateRootAtIndex")
	}

	var r0 common.Root
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (common.Root, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) common.Root); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Root)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_StateRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateRootAtIndex'
type BeaconState_StateRootAtIndex_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// StateRootAtIndex is a helper method to define mock.On call
//   - _a0 uint64
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) StateRootAtIndex(_a0 interface{}) *BeaconState_StateRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_StateRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("StateRootAtIndex", _a0)}
}

func (_c *BeaconState_StateRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 uint64)) *BeaconState_StateRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *BeaconState_StateRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 common.Root, _a1 error) *BeaconState_StateRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_StateRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(uint64) (common.Root, error)) *BeaconState_StateRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// UpdateBlockRootAtIndex provides a mock function with given fields: _a0, _a1
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) UpdateBlockRootAtIndex(_a0 uint64, _a1 common.Root) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlockRootAtIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, common.Root) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_UpdateBlockRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBlockRootAtIndex'
type BeaconState_UpdateBlockRootAtIndex_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// UpdateBlockRootAtIndex is a helper method to define mock.On call
//   - _a0 uint64
//   - _a1 common.Root
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) UpdateBlockRootAtIndex(_a0 interface{}, _a1 interface{}) *BeaconState_UpdateBlockRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_UpdateBlockRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("UpdateBlockRootAtIndex", _a0, _a1)}
}

func (_c *BeaconState_UpdateBlockRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 uint64, _a1 common.Root)) *BeaconState_UpdateBlockRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(common.Root))
	})
	return _c
}

func (_c *BeaconState_UpdateBlockRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_UpdateBlockRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_UpdateBlockRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(uint64, common.Root) error) *BeaconState_UpdateBlockRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// UpdateRandaoMixAtIndex provides a mock function with given fields: _a0, _a1
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) UpdateRandaoMixAtIndex(_a0 uint64, _a1 common.Bytes32) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRandaoMixAtIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, common.Bytes32) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_UpdateRandaoMixAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRandaoMixAtIndex'
type BeaconState_UpdateRandaoMixAtIndex_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// UpdateRandaoMixAtIndex is a helper method to define mock.On call
//   - _a0 uint64
//   - _a1 common.Bytes32
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) UpdateRandaoMixAtIndex(_a0 interface{}, _a1 interface{}) *BeaconState_UpdateRandaoMixAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_UpdateRandaoMixAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("UpdateRandaoMixAtIndex", _a0, _a1)}
}

func (_c *BeaconState_UpdateRandaoMixAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 uint64, _a1 common.Bytes32)) *BeaconState_UpdateRandaoMixAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(common.Bytes32))
	})
	return _c
}

func (_c *BeaconState_UpdateRandaoMixAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_UpdateRandaoMixAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_UpdateRandaoMixAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(uint64, common.Bytes32) error) *BeaconState_UpdateRandaoMixAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// UpdateSlashingAtIndex provides a mock function with given fields: _a0, _a1
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) UpdateSlashingAtIndex(_a0 uint64, _a1 math.Gwei) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSlashingAtIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, math.Gwei) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_UpdateSlashingAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSlashingAtIndex'
type BeaconState_UpdateSlashingAtIndex_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// UpdateSlashingAtIndex is a helper method to define mock.On call
//   - _a0 uint64
//   - _a1 math.Gwei
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) UpdateSlashingAtIndex(_a0 interface{}, _a1 interface{}) *BeaconState_UpdateSlashingAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_UpdateSlashingAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("UpdateSlashingAtIndex", _a0, _a1)}
}

func (_c *BeaconState_UpdateSlashingAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 uint64, _a1 math.Gwei)) *BeaconState_UpdateSlashingAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(math.Gwei))
	})
	return _c
}

func (_c *BeaconState_UpdateSlashingAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_UpdateSlashingAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_UpdateSlashingAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(uint64, math.Gwei) error) *BeaconState_UpdateSlashingAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// UpdateStateRootAtIndex provides a mock function with given fields: _a0, _a1
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) UpdateStateRootAtIndex(_a0 uint64, _a1 common.Root) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStateRootAtIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, common.Root) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_UpdateStateRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStateRootAtIndex'
type BeaconState_UpdateStateRootAtIndex_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// UpdateStateRootAtIndex is a helper method to define mock.On call
//   - _a0 uint64
//   - _a1 common.Root
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) UpdateStateRootAtIndex(_a0 interface{}, _a1 interface{}) *BeaconState_UpdateStateRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_UpdateStateRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("UpdateStateRootAtIndex", _a0, _a1)}
}

func (_c *BeaconState_UpdateStateRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 uint64, _a1 common.Root)) *BeaconState_UpdateStateRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(common.Root))
	})
	return _c
}

func (_c *BeaconState_UpdateStateRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_UpdateStateRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_UpdateStateRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(uint64, common.Root) error) *BeaconState_UpdateStateRootAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// UpdateValidatorAtIndex provides a mock function with given fields: _a0, _a1
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) UpdateValidatorAtIndex(_a0 math.ValidatorIndex, _a1 ValidatorT) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateValidatorAtIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.ValidatorIndex, ValidatorT) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconState_UpdateValidatorAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateValidatorAtIndex'
type BeaconState_UpdateValidatorAtIndex_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// UpdateValidatorAtIndex is a helper method to define mock.On call
//   - _a0 math.ValidatorIndex
//   - _a1 ValidatorT
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) UpdateValidatorAtIndex(_a0 interface{}, _a1 interface{}) *BeaconState_UpdateValidatorAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_UpdateValidatorAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("UpdateValidatorAtIndex", _a0, _a1)}
}

func (_c *BeaconState_UpdateValidatorAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 math.ValidatorIndex, _a1 ValidatorT)) *BeaconState_UpdateValidatorAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.ValidatorIndex), args[1].(ValidatorT))
	})
	return _c
}

func (_c *BeaconState_UpdateValidatorAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 error) *BeaconState_UpdateValidatorAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconState_UpdateValidatorAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(math.ValidatorIndex, ValidatorT) error) *BeaconState_UpdateValidatorAtIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// ValidatorByIndex provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) ValidatorByIndex(_a0 math.ValidatorIndex) (ValidatorT, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorByIndex")
	}

	var r0 ValidatorT
	var r1 error
	if rf, ok := ret.Get(0).(func(math.ValidatorIndex) (ValidatorT, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(math.ValidatorIndex) ValidatorT); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ValidatorT)
	}

	if rf, ok := ret.Get(1).(func(math.ValidatorIndex) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_ValidatorByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorByIndex'
type BeaconState_ValidatorByIndex_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// ValidatorByIndex is a helper method to define mock.On call
//   - _a0 math.ValidatorIndex
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) ValidatorByIndex(_a0 interface{}) *BeaconState_ValidatorByIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_ValidatorByIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("ValidatorByIndex", _a0)}
}

func (_c *BeaconState_ValidatorByIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 math.ValidatorIndex)) *BeaconState_ValidatorByIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.ValidatorIndex))
	})
	return _c
}

func (_c *BeaconState_ValidatorByIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 ValidatorT, _a1 error) *BeaconState_ValidatorByIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_ValidatorByIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(math.ValidatorIndex) (ValidatorT, error)) *BeaconState_ValidatorByIndex_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// ValidatorIndexByCometBFTAddress provides a mock function with given fields: cometBFTAddress
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) ValidatorIndexByCometBFTAddress(cometBFTAddress []byte) (math.ValidatorIndex, error) {
	ret := _m.Called(cometBFTAddress)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorIndexByCometBFTAddress")
	}

	var r0 math.ValidatorIndex
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (math.ValidatorIndex, error)); ok {
		return rf(cometBFTAddress)
	}
	if rf, ok := ret.Get(0).(func([]byte) math.ValidatorIndex); ok {
		r0 = rf(cometBFTAddress)
	} else {
		r0 = ret.Get(0).(math.ValidatorIndex)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(cometBFTAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_ValidatorIndexByCometBFTAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorIndexByCometBFTAddress'
type BeaconState_ValidatorIndexByCometBFTAddress_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// ValidatorIndexByCometBFTAddress is a helper method to define mock.On call
//   - cometBFTAddress []byte
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) ValidatorIndexByCometBFTAddress(cometBFTAddress interface{}) *BeaconState_ValidatorIndexByCometBFTAddress_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_ValidatorIndexByCometBFTAddress_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("ValidatorIndexByCometBFTAddress", cometBFTAddress)}
}

func (_c *BeaconState_ValidatorIndexByCometBFTAddress_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(cometBFTAddress []byte)) *BeaconState_ValidatorIndexByCometBFTAddress_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *BeaconState_ValidatorIndexByCometBFTAddress_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 math.ValidatorIndex, _a1 error) *BeaconState_ValidatorIndexByCometBFTAddress_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_ValidatorIndexByCometBFTAddress_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func([]byte) (math.ValidatorIndex, error)) *BeaconState_ValidatorIndexByCometBFTAddress_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// ValidatorIndexByPubkey provides a mock function with given fields: _a0
func (_m *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) ValidatorIndexByPubkey(_a0 crypto.BLSPubkey) (math.ValidatorIndex, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorIndexByPubkey")
	}

	var r0 math.ValidatorIndex
	var r1 error
	if rf, ok := ret.Get(0).(func(crypto.BLSPubkey) (math.ValidatorIndex, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(crypto.BLSPubkey) math.ValidatorIndex); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(math.ValidatorIndex)
	}

	if rf, ok := ret.Get(1).(func(crypto.BLSPubkey) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconState_ValidatorIndexByPubkey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorIndexByPubkey'
type BeaconState_ValidatorIndexByPubkey_Call[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any] struct {
	*mock.Call
}

// ValidatorIndexByPubkey is a helper method to define mock.On call
//   - _a0 crypto.BLSPubkey
func (_e *BeaconState_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) ValidatorIndexByPubkey(_a0 interface{}) *BeaconState_ValidatorIndexByPubkey_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	return &BeaconState_ValidatorIndexByPubkey_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{Call: _e.mock.On("ValidatorIndexByPubkey", _a0)}
}

func (_c *BeaconState_ValidatorIndexByPubkey_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Run(run func(_a0 crypto.BLSPubkey)) *BeaconState_ValidatorIndexByPubkey_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(crypto.BLSPubkey))
	})
	return _c
}

func (_c *BeaconState_ValidatorIndexByPubkey_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) Return(_a0 math.ValidatorIndex, _a1 error) *BeaconState_ValidatorIndexByPubkey_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconState_ValidatorIndexByPubkey_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]) RunAndReturn(run func(crypto.BLSPubkey) (math.ValidatorIndex, error)) *BeaconState_ValidatorIndexByPubkey_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// NewBeaconState creates a new instance of BeaconState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBeaconState[T any, BeaconBlockHeaderT any, Eth1DataT any, ExecutionPayloadHeaderT any, ForkT any, KVStoreT any, ValidatorT any, ValidatorsT any, WithdrawalT any](t interface {
	mock.TestingT
	Cleanup(func())
}) *BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT] {
	mock := &BeaconState[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, KVStoreT, ValidatorT, ValidatorsT, WithdrawalT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
