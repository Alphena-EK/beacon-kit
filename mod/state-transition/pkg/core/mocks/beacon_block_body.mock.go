// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	common "github.com/berachain/beacon-kit/mod/primitives/pkg/common"
	core "github.com/berachain/beacon-kit/mod/state-transition/pkg/core"

	crypto "github.com/berachain/beacon-kit/mod/primitives/pkg/crypto"

	eip4844 "github.com/berachain/beacon-kit/mod/primitives/pkg/eip4844"

	mock "github.com/stretchr/testify/mock"
)

// BeaconBlockBody is an autogenerated mock type for the BeaconBlockBody type
type BeaconBlockBody[BeaconBlockBodyT any, DepositT any, ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any] struct {
	mock.Mock
}

type BeaconBlockBody_Expecter[BeaconBlockBodyT any, DepositT any, ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any] struct {
	mock *mock.Mock
}

func (_m *BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) EXPECT() *BeaconBlockBody_Expecter[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &BeaconBlockBody_Expecter[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{mock: &_m.Mock}
}

// Empty provides a mock function with given fields: _a0
func (_m *BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Empty(_a0 uint32) BeaconBlockBodyT {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Empty")
	}

	var r0 BeaconBlockBodyT
	if rf, ok := ret.Get(0).(func(uint32) BeaconBlockBodyT); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(BeaconBlockBodyT)
	}

	return r0
}

// BeaconBlockBody_Empty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Empty'
type BeaconBlockBody_Empty_Call[BeaconBlockBodyT any, DepositT any, ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any] struct {
	*mock.Call
}

// Empty is a helper method to define mock.On call
//   - _a0 uint32
func (_e *BeaconBlockBody_Expecter[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Empty(_a0 interface{}) *BeaconBlockBody_Empty_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &BeaconBlockBody_Empty_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("Empty", _a0)}
}

func (_c *BeaconBlockBody_Empty_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func(_a0 uint32)) *BeaconBlockBody_Empty_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *BeaconBlockBody_Empty_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 BeaconBlockBodyT) *BeaconBlockBody_Empty_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_Empty_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func(uint32) BeaconBlockBodyT) *BeaconBlockBody_Empty_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetBlobKzgCommitments provides a mock function with given fields:
func (_m *BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetBlobKzgCommitments() eip4844.KZGCommitments[common.ExecutionHash] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlobKzgCommitments")
	}

	var r0 eip4844.KZGCommitments[common.ExecutionHash]
	if rf, ok := ret.Get(0).(func() eip4844.KZGCommitments[common.ExecutionHash]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eip4844.KZGCommitments[common.ExecutionHash])
		}
	}

	return r0
}

// BeaconBlockBody_GetBlobKzgCommitments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobKzgCommitments'
type BeaconBlockBody_GetBlobKzgCommitments_Call[BeaconBlockBodyT any, DepositT any, ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any] struct {
	*mock.Call
}

// GetBlobKzgCommitments is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetBlobKzgCommitments() *BeaconBlockBody_GetBlobKzgCommitments_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &BeaconBlockBody_GetBlobKzgCommitments_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetBlobKzgCommitments")}
}

func (_c *BeaconBlockBody_GetBlobKzgCommitments_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *BeaconBlockBody_GetBlobKzgCommitments_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetBlobKzgCommitments_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 eip4844.KZGCommitments[common.ExecutionHash]) *BeaconBlockBody_GetBlobKzgCommitments_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetBlobKzgCommitments_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() eip4844.KZGCommitments[common.ExecutionHash]) *BeaconBlockBody_GetBlobKzgCommitments_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetDeposits provides a mock function with given fields:
func (_m *BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetDeposits() []DepositT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeposits")
	}

	var r0 []DepositT
	if rf, ok := ret.Get(0).(func() []DepositT); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DepositT)
		}
	}

	return r0
}

// BeaconBlockBody_GetDeposits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeposits'
type BeaconBlockBody_GetDeposits_Call[BeaconBlockBodyT any, DepositT any, ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any] struct {
	*mock.Call
}

// GetDeposits is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetDeposits() *BeaconBlockBody_GetDeposits_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &BeaconBlockBody_GetDeposits_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetDeposits")}
}

func (_c *BeaconBlockBody_GetDeposits_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *BeaconBlockBody_GetDeposits_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetDeposits_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 []DepositT) *BeaconBlockBody_GetDeposits_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetDeposits_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() []DepositT) *BeaconBlockBody_GetDeposits_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetExecutionPayload provides a mock function with given fields:
func (_m *BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetExecutionPayload() ExecutionPayloadT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionPayload")
	}

	var r0 ExecutionPayloadT
	if rf, ok := ret.Get(0).(func() ExecutionPayloadT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ExecutionPayloadT)
	}

	return r0
}

// BeaconBlockBody_GetExecutionPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionPayload'
type BeaconBlockBody_GetExecutionPayload_Call[BeaconBlockBodyT any, DepositT any, ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any] struct {
	*mock.Call
}

// GetExecutionPayload is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetExecutionPayload() *BeaconBlockBody_GetExecutionPayload_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &BeaconBlockBody_GetExecutionPayload_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetExecutionPayload")}
}

func (_c *BeaconBlockBody_GetExecutionPayload_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *BeaconBlockBody_GetExecutionPayload_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetExecutionPayload_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 ExecutionPayloadT) *BeaconBlockBody_GetExecutionPayload_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetExecutionPayload_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() ExecutionPayloadT) *BeaconBlockBody_GetExecutionPayload_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetRandaoReveal provides a mock function with given fields:
func (_m *BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetRandaoReveal() crypto.BLSSignature {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRandaoReveal")
	}

	var r0 crypto.BLSSignature
	if rf, ok := ret.Get(0).(func() crypto.BLSSignature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.BLSSignature)
		}
	}

	return r0
}

// BeaconBlockBody_GetRandaoReveal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandaoReveal'
type BeaconBlockBody_GetRandaoReveal_Call[BeaconBlockBodyT any, DepositT any, ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any] struct {
	*mock.Call
}

// GetRandaoReveal is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetRandaoReveal() *BeaconBlockBody_GetRandaoReveal_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &BeaconBlockBody_GetRandaoReveal_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetRandaoReveal")}
}

func (_c *BeaconBlockBody_GetRandaoReveal_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *BeaconBlockBody_GetRandaoReveal_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetRandaoReveal_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 crypto.BLSSignature) *BeaconBlockBody_GetRandaoReveal_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetRandaoReveal_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() crypto.BLSSignature) *BeaconBlockBody_GetRandaoReveal_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// HashTreeRoot provides a mock function with given fields:
func (_m *BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) HashTreeRoot() common.Root {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRoot")
	}

	var r0 common.Root
	if rf, ok := ret.Get(0).(func() common.Root); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Root)
		}
	}

	return r0
}

// BeaconBlockBody_HashTreeRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRoot'
type BeaconBlockBody_HashTreeRoot_Call[BeaconBlockBodyT any, DepositT any, ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any] struct {
	*mock.Call
}

// HashTreeRoot is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) HashTreeRoot() *BeaconBlockBody_HashTreeRoot_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &BeaconBlockBody_HashTreeRoot_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("HashTreeRoot")}
}

func (_c *BeaconBlockBody_HashTreeRoot_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *BeaconBlockBody_HashTreeRoot_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_HashTreeRoot_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 common.Root) *BeaconBlockBody_HashTreeRoot_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_HashTreeRoot_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() common.Root) *BeaconBlockBody_HashTreeRoot_Call[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// NewBeaconBlockBody creates a new instance of BeaconBlockBody. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBeaconBlockBody[BeaconBlockBodyT any, DepositT any, ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any](t interface {
	mock.TestingT
	Cleanup(func())
}) *BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	mock := &BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
