// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	bytes "bytes"

	mock "github.com/stretchr/testify/mock"
)

// WithdrawalsConstraint is an autogenerated mock type for the WithdrawalsConstraint type
type WithdrawalsConstraint struct {
	mock.Mock
}

type WithdrawalsConstraint_Expecter struct {
	mock *mock.Mock
}

func (_m *WithdrawalsConstraint) EXPECT() *WithdrawalsConstraint_Expecter {
	return &WithdrawalsConstraint_Expecter{mock: &_m.Mock}
}

// EncodeIndex provides a mock function with given fields: _a0, _a1
func (_m *WithdrawalsConstraint) EncodeIndex(_a0 int, _a1 *bytes.Buffer) {
	_m.Called(_a0, _a1)
}

// WithdrawalsConstraint_EncodeIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodeIndex'
type WithdrawalsConstraint_EncodeIndex_Call struct {
	*mock.Call
}

// EncodeIndex is a helper method to define mock.On call
//   - _a0 int
//   - _a1 *bytes.Buffer
func (_e *WithdrawalsConstraint_Expecter) EncodeIndex(_a0 interface{}, _a1 interface{}) *WithdrawalsConstraint_EncodeIndex_Call {
	return &WithdrawalsConstraint_EncodeIndex_Call{Call: _e.mock.On("EncodeIndex", _a0, _a1)}
}

func (_c *WithdrawalsConstraint_EncodeIndex_Call) Run(run func(_a0 int, _a1 *bytes.Buffer)) *WithdrawalsConstraint_EncodeIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*bytes.Buffer))
	})
	return _c
}

func (_c *WithdrawalsConstraint_EncodeIndex_Call) Return() *WithdrawalsConstraint_EncodeIndex_Call {
	_c.Call.Return()
	return _c
}

func (_c *WithdrawalsConstraint_EncodeIndex_Call) RunAndReturn(run func(int, *bytes.Buffer)) *WithdrawalsConstraint_EncodeIndex_Call {
	_c.Call.Return(run)
	return _c
}

// Len provides a mock function with given fields:
func (_m *WithdrawalsConstraint) Len() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// WithdrawalsConstraint_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type WithdrawalsConstraint_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *WithdrawalsConstraint_Expecter) Len() *WithdrawalsConstraint_Len_Call {
	return &WithdrawalsConstraint_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *WithdrawalsConstraint_Len_Call) Run(run func()) *WithdrawalsConstraint_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WithdrawalsConstraint_Len_Call) Return(_a0 int) *WithdrawalsConstraint_Len_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WithdrawalsConstraint_Len_Call) RunAndReturn(run func() int) *WithdrawalsConstraint_Len_Call {
	_c.Call.Return(run)
	return _c
}

// NewWithdrawalsConstraint creates a new instance of WithdrawalsConstraint. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWithdrawalsConstraint(t interface {
	mock.TestingT
	Cleanup(func())
}) *WithdrawalsConstraint {
	mock := &WithdrawalsConstraint{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
