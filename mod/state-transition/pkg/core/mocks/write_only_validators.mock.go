// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"
	mock "github.com/stretchr/testify/mock"
)

// WriteOnlyValidators is an autogenerated mock type for the WriteOnlyValidators type
type WriteOnlyValidators[ValidatorT any] struct {
	mock.Mock
}

type WriteOnlyValidators_Expecter[ValidatorT any] struct {
	mock *mock.Mock
}

func (_m *WriteOnlyValidators[ValidatorT]) EXPECT() *WriteOnlyValidators_Expecter[ValidatorT] {
	return &WriteOnlyValidators_Expecter[ValidatorT]{mock: &_m.Mock}
}

// AddValidator provides a mock function with given fields: _a0
func (_m *WriteOnlyValidators[ValidatorT]) AddValidator(_a0 ValidatorT) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ValidatorT) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteOnlyValidators_AddValidator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddValidator'
type WriteOnlyValidators_AddValidator_Call[ValidatorT any] struct {
	*mock.Call
}

// AddValidator is a helper method to define mock.On call
//   - _a0 ValidatorT
func (_e *WriteOnlyValidators_Expecter[ValidatorT]) AddValidator(_a0 interface{}) *WriteOnlyValidators_AddValidator_Call[ValidatorT] {
	return &WriteOnlyValidators_AddValidator_Call[ValidatorT]{Call: _e.mock.On("AddValidator", _a0)}
}

func (_c *WriteOnlyValidators_AddValidator_Call[ValidatorT]) Run(run func(_a0 ValidatorT)) *WriteOnlyValidators_AddValidator_Call[ValidatorT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ValidatorT))
	})
	return _c
}

func (_c *WriteOnlyValidators_AddValidator_Call[ValidatorT]) Return(_a0 error) *WriteOnlyValidators_AddValidator_Call[ValidatorT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WriteOnlyValidators_AddValidator_Call[ValidatorT]) RunAndReturn(run func(ValidatorT) error) *WriteOnlyValidators_AddValidator_Call[ValidatorT] {
	_c.Call.Return(run)
	return _c
}

// AddValidatorBartio provides a mock function with given fields: _a0
func (_m *WriteOnlyValidators[ValidatorT]) AddValidatorBartio(_a0 ValidatorT) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddValidatorBartio")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ValidatorT) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteOnlyValidators_AddValidatorBartio_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddValidatorBartio'
type WriteOnlyValidators_AddValidatorBartio_Call[ValidatorT any] struct {
	*mock.Call
}

// AddValidatorBartio is a helper method to define mock.On call
//   - _a0 ValidatorT
func (_e *WriteOnlyValidators_Expecter[ValidatorT]) AddValidatorBartio(_a0 interface{}) *WriteOnlyValidators_AddValidatorBartio_Call[ValidatorT] {
	return &WriteOnlyValidators_AddValidatorBartio_Call[ValidatorT]{Call: _e.mock.On("AddValidatorBartio", _a0)}
}

func (_c *WriteOnlyValidators_AddValidatorBartio_Call[ValidatorT]) Run(run func(_a0 ValidatorT)) *WriteOnlyValidators_AddValidatorBartio_Call[ValidatorT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ValidatorT))
	})
	return _c
}

func (_c *WriteOnlyValidators_AddValidatorBartio_Call[ValidatorT]) Return(_a0 error) *WriteOnlyValidators_AddValidatorBartio_Call[ValidatorT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WriteOnlyValidators_AddValidatorBartio_Call[ValidatorT]) RunAndReturn(run func(ValidatorT) error) *WriteOnlyValidators_AddValidatorBartio_Call[ValidatorT] {
	_c.Call.Return(run)
	return _c
}

// UpdateValidatorAtIndex provides a mock function with given fields: _a0, _a1
func (_m *WriteOnlyValidators[ValidatorT]) UpdateValidatorAtIndex(_a0 math.ValidatorIndex, _a1 ValidatorT) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateValidatorAtIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.ValidatorIndex, ValidatorT) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteOnlyValidators_UpdateValidatorAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateValidatorAtIndex'
type WriteOnlyValidators_UpdateValidatorAtIndex_Call[ValidatorT any] struct {
	*mock.Call
}

// UpdateValidatorAtIndex is a helper method to define mock.On call
//   - _a0 math.ValidatorIndex
//   - _a1 ValidatorT
func (_e *WriteOnlyValidators_Expecter[ValidatorT]) UpdateValidatorAtIndex(_a0 interface{}, _a1 interface{}) *WriteOnlyValidators_UpdateValidatorAtIndex_Call[ValidatorT] {
	return &WriteOnlyValidators_UpdateValidatorAtIndex_Call[ValidatorT]{Call: _e.mock.On("UpdateValidatorAtIndex", _a0, _a1)}
}

func (_c *WriteOnlyValidators_UpdateValidatorAtIndex_Call[ValidatorT]) Run(run func(_a0 math.ValidatorIndex, _a1 ValidatorT)) *WriteOnlyValidators_UpdateValidatorAtIndex_Call[ValidatorT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.ValidatorIndex), args[1].(ValidatorT))
	})
	return _c
}

func (_c *WriteOnlyValidators_UpdateValidatorAtIndex_Call[ValidatorT]) Return(_a0 error) *WriteOnlyValidators_UpdateValidatorAtIndex_Call[ValidatorT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WriteOnlyValidators_UpdateValidatorAtIndex_Call[ValidatorT]) RunAndReturn(run func(math.ValidatorIndex, ValidatorT) error) *WriteOnlyValidators_UpdateValidatorAtIndex_Call[ValidatorT] {
	_c.Call.Return(run)
	return _c
}

// NewWriteOnlyValidators creates a new instance of WriteOnlyValidators. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWriteOnlyValidators[ValidatorT any](t interface {
	mock.TestingT
	Cleanup(func())
}) *WriteOnlyValidators[ValidatorT] {
	mock := &WriteOnlyValidators[ValidatorT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
