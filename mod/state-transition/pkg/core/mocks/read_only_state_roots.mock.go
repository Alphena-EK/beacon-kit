// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	common "github.com/berachain/beacon-kit/mod/primitives/pkg/common"

	mock "github.com/stretchr/testify/mock"
)

// ReadOnlyStateRoots is an autogenerated mock type for the ReadOnlyStateRoots type
type ReadOnlyStateRoots struct {
	mock.Mock
}

type ReadOnlyStateRoots_Expecter struct {
	mock *mock.Mock
}

func (_m *ReadOnlyStateRoots) EXPECT() *ReadOnlyStateRoots_Expecter {
	return &ReadOnlyStateRoots_Expecter{mock: &_m.Mock}
}

// StateRootAtIndex provides a mock function with given fields: _a0
func (_m *ReadOnlyStateRoots) StateRootAtIndex(_a0 uint64) (common.Root, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for StateRootAtIndex")
	}

	var r0 common.Root
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (common.Root, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) common.Root); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Root)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyStateRoots_StateRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateRootAtIndex'
type ReadOnlyStateRoots_StateRootAtIndex_Call struct {
	*mock.Call
}

// StateRootAtIndex is a helper method to define mock.On call
//   - _a0 uint64
func (_e *ReadOnlyStateRoots_Expecter) StateRootAtIndex(_a0 interface{}) *ReadOnlyStateRoots_StateRootAtIndex_Call {
	return &ReadOnlyStateRoots_StateRootAtIndex_Call{Call: _e.mock.On("StateRootAtIndex", _a0)}
}

func (_c *ReadOnlyStateRoots_StateRootAtIndex_Call) Run(run func(_a0 uint64)) *ReadOnlyStateRoots_StateRootAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *ReadOnlyStateRoots_StateRootAtIndex_Call) Return(_a0 common.Root, _a1 error) *ReadOnlyStateRoots_StateRootAtIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyStateRoots_StateRootAtIndex_Call) RunAndReturn(run func(uint64) (common.Root, error)) *ReadOnlyStateRoots_StateRootAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// NewReadOnlyStateRoots creates a new instance of ReadOnlyStateRoots. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadOnlyStateRoots(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadOnlyStateRoots {
	mock := &ReadOnlyStateRoots{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
