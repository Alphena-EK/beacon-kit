// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"

	types "github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
)

// Validator is an autogenerated mock type for the Validator type
type Validator struct {
	mock.Mock
}

type Validator_Expecter struct {
	mock *mock.Mock
}

func (_m *Validator) EXPECT() *Validator_Expecter {
	return &Validator_Expecter{mock: &_m.Mock}
}

// GetActivationEligibilityEpoch provides a mock function with given fields:
func (_m *Validator) GetActivationEligibilityEpoch() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActivationEligibilityEpoch")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// Validator_GetActivationEligibilityEpoch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActivationEligibilityEpoch'
type Validator_GetActivationEligibilityEpoch_Call struct {
	*mock.Call
}

// GetActivationEligibilityEpoch is a helper method to define mock.On call
func (_e *Validator_Expecter) GetActivationEligibilityEpoch() *Validator_GetActivationEligibilityEpoch_Call {
	return &Validator_GetActivationEligibilityEpoch_Call{Call: _e.mock.On("GetActivationEligibilityEpoch")}
}

func (_c *Validator_GetActivationEligibilityEpoch_Call) Run(run func()) *Validator_GetActivationEligibilityEpoch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validator_GetActivationEligibilityEpoch_Call) Return(_a0 math.U64) *Validator_GetActivationEligibilityEpoch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_GetActivationEligibilityEpoch_Call) RunAndReturn(run func() math.U64) *Validator_GetActivationEligibilityEpoch_Call {
	_c.Call.Return(run)
	return _c
}

// GetActivationEpoch provides a mock function with given fields:
func (_m *Validator) GetActivationEpoch() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActivationEpoch")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// Validator_GetActivationEpoch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActivationEpoch'
type Validator_GetActivationEpoch_Call struct {
	*mock.Call
}

// GetActivationEpoch is a helper method to define mock.On call
func (_e *Validator_Expecter) GetActivationEpoch() *Validator_GetActivationEpoch_Call {
	return &Validator_GetActivationEpoch_Call{Call: _e.mock.On("GetActivationEpoch")}
}

func (_c *Validator_GetActivationEpoch_Call) Run(run func()) *Validator_GetActivationEpoch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validator_GetActivationEpoch_Call) Return(_a0 math.U64) *Validator_GetActivationEpoch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_GetActivationEpoch_Call) RunAndReturn(run func() math.U64) *Validator_GetActivationEpoch_Call {
	_c.Call.Return(run)
	return _c
}

// GetEffectiveBalance provides a mock function with given fields:
func (_m *Validator) GetEffectiveBalance() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEffectiveBalance")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// Validator_GetEffectiveBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEffectiveBalance'
type Validator_GetEffectiveBalance_Call struct {
	*mock.Call
}

// GetEffectiveBalance is a helper method to define mock.On call
func (_e *Validator_Expecter) GetEffectiveBalance() *Validator_GetEffectiveBalance_Call {
	return &Validator_GetEffectiveBalance_Call{Call: _e.mock.On("GetEffectiveBalance")}
}

func (_c *Validator_GetEffectiveBalance_Call) Run(run func()) *Validator_GetEffectiveBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validator_GetEffectiveBalance_Call) Return(_a0 math.U64) *Validator_GetEffectiveBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_GetEffectiveBalance_Call) RunAndReturn(run func() math.U64) *Validator_GetEffectiveBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetExitEpoch provides a mock function with given fields:
func (_m *Validator) GetExitEpoch() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExitEpoch")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// Validator_GetExitEpoch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExitEpoch'
type Validator_GetExitEpoch_Call struct {
	*mock.Call
}

// GetExitEpoch is a helper method to define mock.On call
func (_e *Validator_Expecter) GetExitEpoch() *Validator_GetExitEpoch_Call {
	return &Validator_GetExitEpoch_Call{Call: _e.mock.On("GetExitEpoch")}
}

func (_c *Validator_GetExitEpoch_Call) Run(run func()) *Validator_GetExitEpoch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validator_GetExitEpoch_Call) Return(_a0 math.U64) *Validator_GetExitEpoch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_GetExitEpoch_Call) RunAndReturn(run func() math.U64) *Validator_GetExitEpoch_Call {
	_c.Call.Return(run)
	return _c
}

// GetPubkey provides a mock function with given fields:
func (_m *Validator) GetPubkey() bytes.B48 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPubkey")
	}

	var r0 bytes.B48
	if rf, ok := ret.Get(0).(func() bytes.B48); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B48)
		}
	}

	return r0
}

// Validator_GetPubkey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPubkey'
type Validator_GetPubkey_Call struct {
	*mock.Call
}

// GetPubkey is a helper method to define mock.On call
func (_e *Validator_Expecter) GetPubkey() *Validator_GetPubkey_Call {
	return &Validator_GetPubkey_Call{Call: _e.mock.On("GetPubkey")}
}

func (_c *Validator_GetPubkey_Call) Run(run func()) *Validator_GetPubkey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validator_GetPubkey_Call) Return(_a0 bytes.B48) *Validator_GetPubkey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_GetPubkey_Call) RunAndReturn(run func() bytes.B48) *Validator_GetPubkey_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithdrawableEpoch provides a mock function with given fields:
func (_m *Validator) GetWithdrawableEpoch() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawableEpoch")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// Validator_GetWithdrawableEpoch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawableEpoch'
type Validator_GetWithdrawableEpoch_Call struct {
	*mock.Call
}

// GetWithdrawableEpoch is a helper method to define mock.On call
func (_e *Validator_Expecter) GetWithdrawableEpoch() *Validator_GetWithdrawableEpoch_Call {
	return &Validator_GetWithdrawableEpoch_Call{Call: _e.mock.On("GetWithdrawableEpoch")}
}

func (_c *Validator_GetWithdrawableEpoch_Call) Run(run func()) *Validator_GetWithdrawableEpoch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validator_GetWithdrawableEpoch_Call) Return(_a0 math.U64) *Validator_GetWithdrawableEpoch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_GetWithdrawableEpoch_Call) RunAndReturn(run func() math.U64) *Validator_GetWithdrawableEpoch_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithdrawalCredentials provides a mock function with given fields:
func (_m *Validator) GetWithdrawalCredentials() types.WithdrawalCredentials {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawalCredentials")
	}

	var r0 types.WithdrawalCredentials
	if rf, ok := ret.Get(0).(func() types.WithdrawalCredentials); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.WithdrawalCredentials)
		}
	}

	return r0
}

// Validator_GetWithdrawalCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawalCredentials'
type Validator_GetWithdrawalCredentials_Call struct {
	*mock.Call
}

// GetWithdrawalCredentials is a helper method to define mock.On call
func (_e *Validator_Expecter) GetWithdrawalCredentials() *Validator_GetWithdrawalCredentials_Call {
	return &Validator_GetWithdrawalCredentials_Call{Call: _e.mock.On("GetWithdrawalCredentials")}
}

func (_c *Validator_GetWithdrawalCredentials_Call) Run(run func()) *Validator_GetWithdrawalCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validator_GetWithdrawalCredentials_Call) Return(_a0 types.WithdrawalCredentials) *Validator_GetWithdrawalCredentials_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_GetWithdrawalCredentials_Call) RunAndReturn(run func() types.WithdrawalCredentials) *Validator_GetWithdrawalCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// IsSlashed provides a mock function with given fields:
func (_m *Validator) IsSlashed() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSlashed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Validator_IsSlashed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSlashed'
type Validator_IsSlashed_Call struct {
	*mock.Call
}

// IsSlashed is a helper method to define mock.On call
func (_e *Validator_Expecter) IsSlashed() *Validator_IsSlashed_Call {
	return &Validator_IsSlashed_Call{Call: _e.mock.On("IsSlashed")}
}

func (_c *Validator_IsSlashed_Call) Run(run func()) *Validator_IsSlashed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Validator_IsSlashed_Call) Return(_a0 bool) *Validator_IsSlashed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_IsSlashed_Call) RunAndReturn(run func() bool) *Validator_IsSlashed_Call {
	_c.Call.Return(run)
	return _c
}

// NewValidator creates a new instance of Validator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Validator {
	mock := &Validator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
