// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Context is an autogenerated mock type for the Context type
type Context struct {
	mock.Mock
}

type Context_Expecter struct {
	mock *mock.Mock
}

func (_m *Context) EXPECT() *Context_Expecter {
	return &Context_Expecter{mock: &_m.Mock}
}

// Deadline provides a mock function with given fields:
func (_m *Context) Deadline() (time.Time, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Deadline")
	}

	var r0 time.Time
	var r1 bool
	if rf, ok := ret.Get(0).(func() (time.Time, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Context_Deadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deadline'
type Context_Deadline_Call struct {
	*mock.Call
}

// Deadline is a helper method to define mock.On call
func (_e *Context_Expecter) Deadline() *Context_Deadline_Call {
	return &Context_Deadline_Call{Call: _e.mock.On("Deadline")}
}

func (_c *Context_Deadline_Call) Run(run func()) *Context_Deadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Deadline_Call) Return(deadline time.Time, ok bool) *Context_Deadline_Call {
	_c.Call.Return(deadline, ok)
	return _c
}

func (_c *Context_Deadline_Call) RunAndReturn(run func() (time.Time, bool)) *Context_Deadline_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function with given fields:
func (_m *Context) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Context_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type Context_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *Context_Expecter) Done() *Context_Done_Call {
	return &Context_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *Context_Done_Call) Run(run func()) *Context_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Done_Call) Return(_a0 <-chan struct{}) *Context_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Done_Call) RunAndReturn(run func() <-chan struct{}) *Context_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function with given fields:
func (_m *Context) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Context_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type Context_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *Context_Expecter) Err() *Context_Err_Call {
	return &Context_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *Context_Err_Call) Run(run func()) *Context_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Err_Call) Return(_a0 error) *Context_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Err_Call) RunAndReturn(run func() error) *Context_Err_Call {
	_c.Call.Return(run)
	return _c
}

// GetOptimisticEngine provides a mock function with given fields:
func (_m *Context) GetOptimisticEngine() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOptimisticEngine")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Context_GetOptimisticEngine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOptimisticEngine'
type Context_GetOptimisticEngine_Call struct {
	*mock.Call
}

// GetOptimisticEngine is a helper method to define mock.On call
func (_e *Context_Expecter) GetOptimisticEngine() *Context_GetOptimisticEngine_Call {
	return &Context_GetOptimisticEngine_Call{Call: _e.mock.On("GetOptimisticEngine")}
}

func (_c *Context_GetOptimisticEngine_Call) Run(run func()) *Context_GetOptimisticEngine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_GetOptimisticEngine_Call) Return(_a0 bool) *Context_GetOptimisticEngine_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_GetOptimisticEngine_Call) RunAndReturn(run func() bool) *Context_GetOptimisticEngine_Call {
	_c.Call.Return(run)
	return _c
}

// GetSkipPayloadVerification provides a mock function with given fields:
func (_m *Context) GetSkipPayloadVerification() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSkipPayloadVerification")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Context_GetSkipPayloadVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSkipPayloadVerification'
type Context_GetSkipPayloadVerification_Call struct {
	*mock.Call
}

// GetSkipPayloadVerification is a helper method to define mock.On call
func (_e *Context_Expecter) GetSkipPayloadVerification() *Context_GetSkipPayloadVerification_Call {
	return &Context_GetSkipPayloadVerification_Call{Call: _e.mock.On("GetSkipPayloadVerification")}
}

func (_c *Context_GetSkipPayloadVerification_Call) Run(run func()) *Context_GetSkipPayloadVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_GetSkipPayloadVerification_Call) Return(_a0 bool) *Context_GetSkipPayloadVerification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_GetSkipPayloadVerification_Call) RunAndReturn(run func() bool) *Context_GetSkipPayloadVerification_Call {
	_c.Call.Return(run)
	return _c
}

// GetSkipValidateRandao provides a mock function with given fields:
func (_m *Context) GetSkipValidateRandao() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSkipValidateRandao")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Context_GetSkipValidateRandao_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSkipValidateRandao'
type Context_GetSkipValidateRandao_Call struct {
	*mock.Call
}

// GetSkipValidateRandao is a helper method to define mock.On call
func (_e *Context_Expecter) GetSkipValidateRandao() *Context_GetSkipValidateRandao_Call {
	return &Context_GetSkipValidateRandao_Call{Call: _e.mock.On("GetSkipValidateRandao")}
}

func (_c *Context_GetSkipValidateRandao_Call) Run(run func()) *Context_GetSkipValidateRandao_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_GetSkipValidateRandao_Call) Return(_a0 bool) *Context_GetSkipValidateRandao_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_GetSkipValidateRandao_Call) RunAndReturn(run func() bool) *Context_GetSkipValidateRandao_Call {
	_c.Call.Return(run)
	return _c
}

// GetSkipValidateResult provides a mock function with given fields:
func (_m *Context) GetSkipValidateResult() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSkipValidateResult")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Context_GetSkipValidateResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSkipValidateResult'
type Context_GetSkipValidateResult_Call struct {
	*mock.Call
}

// GetSkipValidateResult is a helper method to define mock.On call
func (_e *Context_Expecter) GetSkipValidateResult() *Context_GetSkipValidateResult_Call {
	return &Context_GetSkipValidateResult_Call{Call: _e.mock.On("GetSkipValidateResult")}
}

func (_c *Context_GetSkipValidateResult_Call) Run(run func()) *Context_GetSkipValidateResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_GetSkipValidateResult_Call) Return(_a0 bool) *Context_GetSkipValidateResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_GetSkipValidateResult_Call) RunAndReturn(run func() bool) *Context_GetSkipValidateResult_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with given fields: key
func (_m *Context) Value(key any) any {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 any
	if rf, ok := ret.Get(0).(func(any) any); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// Context_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type Context_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
//   - key any
func (_e *Context_Expecter) Value(key interface{}) *Context_Value_Call {
	return &Context_Value_Call{Call: _e.mock.On("Value", key)}
}

func (_c *Context_Value_Call) Run(run func(key any)) *Context_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *Context_Value_Call) Return(_a0 any) *Context_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Value_Call) RunAndReturn(run func(any) any) *Context_Value_Call {
	_c.Call.Return(run)
	return _c
}

// NewContext creates a new instance of Context. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *Context {
	mock := &Context{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
