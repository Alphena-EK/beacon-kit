// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	common "github.com/berachain/beacon-kit/mod/primitives/pkg/common"

	mock "github.com/stretchr/testify/mock"
)

// ExecutionPayloadHeader is an autogenerated mock type for the ExecutionPayloadHeader type
type ExecutionPayloadHeader struct {
	mock.Mock
}

type ExecutionPayloadHeader_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutionPayloadHeader) EXPECT() *ExecutionPayloadHeader_Expecter {
	return &ExecutionPayloadHeader_Expecter{mock: &_m.Mock}
}

// GetBlockHash provides a mock function with given fields:
func (_m *ExecutionPayloadHeader) GetBlockHash() common.ExecutionHash {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHash")
	}

	var r0 common.ExecutionHash
	if rf, ok := ret.Get(0).(func() common.ExecutionHash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.ExecutionHash)
		}
	}

	return r0
}

// ExecutionPayloadHeader_GetBlockHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHash'
type ExecutionPayloadHeader_GetBlockHash_Call struct {
	*mock.Call
}

// GetBlockHash is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter) GetBlockHash() *ExecutionPayloadHeader_GetBlockHash_Call {
	return &ExecutionPayloadHeader_GetBlockHash_Call{Call: _e.mock.On("GetBlockHash")}
}

func (_c *ExecutionPayloadHeader_GetBlockHash_Call) Run(run func()) *ExecutionPayloadHeader_GetBlockHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetBlockHash_Call) Return(_a0 common.ExecutionHash) *ExecutionPayloadHeader_GetBlockHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetBlockHash_Call) RunAndReturn(run func() common.ExecutionHash) *ExecutionPayloadHeader_GetBlockHash_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutionPayloadHeader creates a new instance of ExecutionPayloadHeader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionPayloadHeader(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionPayloadHeader {
	mock := &ExecutionPayloadHeader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
