// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	mock "github.com/stretchr/testify/mock"
)

// Fork is an autogenerated mock type for the Fork type
type Fork[ForkT any] struct {
	mock.Mock
}

type Fork_Expecter[ForkT any] struct {
	mock *mock.Mock
}

func (_m *Fork[ForkT]) EXPECT() *Fork_Expecter[ForkT] {
	return &Fork_Expecter[ForkT]{mock: &_m.Mock}
}

// GetPreviousVersion provides a mock function with given fields:
func (_m *Fork[ForkT]) GetPreviousVersion() bytes.B4 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPreviousVersion")
	}

	var r0 bytes.B4
	if rf, ok := ret.Get(0).(func() bytes.B4); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B4)
		}
	}

	return r0
}

// Fork_GetPreviousVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreviousVersion'
type Fork_GetPreviousVersion_Call[ForkT any] struct {
	*mock.Call
}

// GetPreviousVersion is a helper method to define mock.On call
func (_e *Fork_Expecter[ForkT]) GetPreviousVersion() *Fork_GetPreviousVersion_Call[ForkT] {
	return &Fork_GetPreviousVersion_Call[ForkT]{Call: _e.mock.On("GetPreviousVersion")}
}

func (_c *Fork_GetPreviousVersion_Call[ForkT]) Run(run func()) *Fork_GetPreviousVersion_Call[ForkT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Fork_GetPreviousVersion_Call[ForkT]) Return(_a0 bytes.B4) *Fork_GetPreviousVersion_Call[ForkT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Fork_GetPreviousVersion_Call[ForkT]) RunAndReturn(run func() bytes.B4) *Fork_GetPreviousVersion_Call[ForkT] {
	_c.Call.Return(run)
	return _c
}

// NewFork creates a new instance of Fork. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFork[ForkT any](t interface {
	mock.TestingT
	Cleanup(func())
}) *Fork[ForkT] {
	mock := &Fork[ForkT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
