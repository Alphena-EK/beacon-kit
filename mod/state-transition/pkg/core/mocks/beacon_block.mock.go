// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	common "github.com/berachain/beacon-kit/mod/primitives/pkg/common"
	core "github.com/berachain/beacon-kit/mod/state-transition/pkg/core"

	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"
)

// BeaconBlock is an autogenerated mock type for the BeaconBlock type
type BeaconBlock[DepositT any, BeaconBlockBodyT core.BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any] struct {
	mock.Mock
}

type BeaconBlock_Expecter[DepositT any, BeaconBlockBodyT core.BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any] struct {
	mock *mock.Mock
}

func (_m *BeaconBlock[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) EXPECT() *BeaconBlock_Expecter[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &BeaconBlock_Expecter[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{mock: &_m.Mock}
}

// GetBody provides a mock function with given fields:
func (_m *BeaconBlock[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetBody() BeaconBlockBodyT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBody")
	}

	var r0 BeaconBlockBodyT
	if rf, ok := ret.Get(0).(func() BeaconBlockBodyT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(BeaconBlockBodyT)
	}

	return r0
}

// BeaconBlock_GetBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBody'
type BeaconBlock_GetBody_Call[DepositT any, BeaconBlockBodyT core.BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any] struct {
	*mock.Call
}

// GetBody is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetBody() *BeaconBlock_GetBody_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &BeaconBlock_GetBody_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetBody")}
}

func (_c *BeaconBlock_GetBody_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *BeaconBlock_GetBody_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_GetBody_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 BeaconBlockBodyT) *BeaconBlock_GetBody_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_GetBody_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() BeaconBlockBodyT) *BeaconBlock_GetBody_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetParentBlockRoot provides a mock function with given fields:
func (_m *BeaconBlock[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetParentBlockRoot() common.Root {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetParentBlockRoot")
	}

	var r0 common.Root
	if rf, ok := ret.Get(0).(func() common.Root); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Root)
		}
	}

	return r0
}

// BeaconBlock_GetParentBlockRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentBlockRoot'
type BeaconBlock_GetParentBlockRoot_Call[DepositT any, BeaconBlockBodyT core.BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any] struct {
	*mock.Call
}

// GetParentBlockRoot is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetParentBlockRoot() *BeaconBlock_GetParentBlockRoot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &BeaconBlock_GetParentBlockRoot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetParentBlockRoot")}
}

func (_c *BeaconBlock_GetParentBlockRoot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *BeaconBlock_GetParentBlockRoot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_GetParentBlockRoot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 common.Root) *BeaconBlock_GetParentBlockRoot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_GetParentBlockRoot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() common.Root) *BeaconBlock_GetParentBlockRoot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetProposerIndex provides a mock function with given fields:
func (_m *BeaconBlock[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetProposerIndex() math.ValidatorIndex {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProposerIndex")
	}

	var r0 math.ValidatorIndex
	if rf, ok := ret.Get(0).(func() math.ValidatorIndex); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.ValidatorIndex)
	}

	return r0
}

// BeaconBlock_GetProposerIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProposerIndex'
type BeaconBlock_GetProposerIndex_Call[DepositT any, BeaconBlockBodyT core.BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any] struct {
	*mock.Call
}

// GetProposerIndex is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetProposerIndex() *BeaconBlock_GetProposerIndex_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &BeaconBlock_GetProposerIndex_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetProposerIndex")}
}

func (_c *BeaconBlock_GetProposerIndex_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *BeaconBlock_GetProposerIndex_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_GetProposerIndex_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 math.ValidatorIndex) *BeaconBlock_GetProposerIndex_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_GetProposerIndex_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() math.ValidatorIndex) *BeaconBlock_GetProposerIndex_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetSlot provides a mock function with given fields:
func (_m *BeaconBlock[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetSlot() math.Slot {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSlot")
	}

	var r0 math.Slot
	if rf, ok := ret.Get(0).(func() math.Slot); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.Slot)
	}

	return r0
}

// BeaconBlock_GetSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlot'
type BeaconBlock_GetSlot_Call[DepositT any, BeaconBlockBodyT core.BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any] struct {
	*mock.Call
}

// GetSlot is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetSlot() *BeaconBlock_GetSlot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &BeaconBlock_GetSlot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetSlot")}
}

func (_c *BeaconBlock_GetSlot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *BeaconBlock_GetSlot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_GetSlot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 math.Slot) *BeaconBlock_GetSlot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_GetSlot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() math.Slot) *BeaconBlock_GetSlot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetStateRoot provides a mock function with given fields:
func (_m *BeaconBlock[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetStateRoot() common.Root {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStateRoot")
	}

	var r0 common.Root
	if rf, ok := ret.Get(0).(func() common.Root); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Root)
		}
	}

	return r0
}

// BeaconBlock_GetStateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateRoot'
type BeaconBlock_GetStateRoot_Call[DepositT any, BeaconBlockBodyT core.BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any] struct {
	*mock.Call
}

// GetStateRoot is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetStateRoot() *BeaconBlock_GetStateRoot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &BeaconBlock_GetStateRoot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetStateRoot")}
}

func (_c *BeaconBlock_GetStateRoot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *BeaconBlock_GetStateRoot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_GetStateRoot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 common.Root) *BeaconBlock_GetStateRoot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_GetStateRoot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() common.Root) *BeaconBlock_GetStateRoot_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// IsNil provides a mock function with given fields:
func (_m *BeaconBlock[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BeaconBlock_IsNil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNil'
type BeaconBlock_IsNil_Call[DepositT any, BeaconBlockBodyT core.BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any] struct {
	*mock.Call
}

// IsNil is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) IsNil() *BeaconBlock_IsNil_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &BeaconBlock_IsNil_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("IsNil")}
}

func (_c *BeaconBlock_IsNil_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *BeaconBlock_IsNil_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_IsNil_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 bool) *BeaconBlock_IsNil_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_IsNil_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() bool) *BeaconBlock_IsNil_Call[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// NewBeaconBlock creates a new instance of BeaconBlock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBeaconBlock[DepositT any, BeaconBlockBodyT core.BeaconBlockBody[BeaconBlockBodyT, DepositT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadT core.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT], ExecutionPayloadHeaderT core.ExecutionPayloadHeader, WithdrawalsT any](t interface {
	mock.TestingT
	Cleanup(func())
}) *BeaconBlock[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	mock := &BeaconBlock[DepositT, BeaconBlockBodyT, ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
