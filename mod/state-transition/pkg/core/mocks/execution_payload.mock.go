// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	common "github.com/berachain/beacon-kit/mod/primitives/pkg/common"

	engineprimitives "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/engine-primitives"

	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"
)

// ExecutionPayload is an autogenerated mock type for the ExecutionPayload type
type ExecutionPayload[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	mock.Mock
}

type ExecutionPayload_Expecter[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	mock *mock.Mock
}

func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) EXPECT() *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{mock: &_m.Mock}
}

// Empty provides a mock function with given fields: _a0
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Empty(_a0 uint32) ExecutionPayloadT {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Empty")
	}

	var r0 ExecutionPayloadT
	if rf, ok := ret.Get(0).(func(uint32) ExecutionPayloadT); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ExecutionPayloadT)
	}

	return r0
}

// ExecutionPayload_Empty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Empty'
type ExecutionPayload_Empty_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// Empty is a helper method to define mock.On call
//   - _a0 uint32
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Empty(_a0 interface{}) *ExecutionPayload_Empty_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_Empty_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("Empty", _a0)}
}

func (_c *ExecutionPayload_Empty_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func(_a0 uint32)) *ExecutionPayload_Empty_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *ExecutionPayload_Empty_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 ExecutionPayloadT) *ExecutionPayload_Empty_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_Empty_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func(uint32) ExecutionPayloadT) *ExecutionPayload_Empty_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetBaseFeePerGas provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetBaseFeePerGas() *math.U256 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBaseFeePerGas")
	}

	var r0 *math.U256
	if rf, ok := ret.Get(0).(func() *math.U256); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*math.U256)
		}
	}

	return r0
}

// ExecutionPayload_GetBaseFeePerGas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBaseFeePerGas'
type ExecutionPayload_GetBaseFeePerGas_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetBaseFeePerGas is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetBaseFeePerGas() *ExecutionPayload_GetBaseFeePerGas_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetBaseFeePerGas_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetBaseFeePerGas")}
}

func (_c *ExecutionPayload_GetBaseFeePerGas_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetBaseFeePerGas_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetBaseFeePerGas_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 *math.U256) *ExecutionPayload_GetBaseFeePerGas_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetBaseFeePerGas_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() *math.U256) *ExecutionPayload_GetBaseFeePerGas_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetBlobGasUsed provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetBlobGasUsed() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlobGasUsed")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayload_GetBlobGasUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobGasUsed'
type ExecutionPayload_GetBlobGasUsed_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetBlobGasUsed is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetBlobGasUsed() *ExecutionPayload_GetBlobGasUsed_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetBlobGasUsed_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetBlobGasUsed")}
}

func (_c *ExecutionPayload_GetBlobGasUsed_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetBlobGasUsed_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetBlobGasUsed_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 math.U64) *ExecutionPayload_GetBlobGasUsed_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetBlobGasUsed_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() math.U64) *ExecutionPayload_GetBlobGasUsed_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetBlockHash provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetBlockHash() common.ExecutionHash {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHash")
	}

	var r0 common.ExecutionHash
	if rf, ok := ret.Get(0).(func() common.ExecutionHash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.ExecutionHash)
		}
	}

	return r0
}

// ExecutionPayload_GetBlockHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHash'
type ExecutionPayload_GetBlockHash_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetBlockHash is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetBlockHash() *ExecutionPayload_GetBlockHash_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetBlockHash_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetBlockHash")}
}

func (_c *ExecutionPayload_GetBlockHash_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetBlockHash_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetBlockHash_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 common.ExecutionHash) *ExecutionPayload_GetBlockHash_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetBlockHash_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() common.ExecutionHash) *ExecutionPayload_GetBlockHash_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetExcessBlobGas provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetExcessBlobGas() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExcessBlobGas")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayload_GetExcessBlobGas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExcessBlobGas'
type ExecutionPayload_GetExcessBlobGas_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetExcessBlobGas is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetExcessBlobGas() *ExecutionPayload_GetExcessBlobGas_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetExcessBlobGas_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetExcessBlobGas")}
}

func (_c *ExecutionPayload_GetExcessBlobGas_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetExcessBlobGas_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetExcessBlobGas_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 math.U64) *ExecutionPayload_GetExcessBlobGas_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetExcessBlobGas_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() math.U64) *ExecutionPayload_GetExcessBlobGas_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetExtraData provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetExtraData() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExtraData")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// ExecutionPayload_GetExtraData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExtraData'
type ExecutionPayload_GetExtraData_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetExtraData is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetExtraData() *ExecutionPayload_GetExtraData_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetExtraData_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetExtraData")}
}

func (_c *ExecutionPayload_GetExtraData_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetExtraData_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetExtraData_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 []byte) *ExecutionPayload_GetExtraData_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetExtraData_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() []byte) *ExecutionPayload_GetExtraData_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetFeeRecipient provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetFeeRecipient() common.ExecutionAddress {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFeeRecipient")
	}

	var r0 common.ExecutionAddress
	if rf, ok := ret.Get(0).(func() common.ExecutionAddress); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.ExecutionAddress)
		}
	}

	return r0
}

// ExecutionPayload_GetFeeRecipient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeeRecipient'
type ExecutionPayload_GetFeeRecipient_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetFeeRecipient is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetFeeRecipient() *ExecutionPayload_GetFeeRecipient_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetFeeRecipient_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetFeeRecipient")}
}

func (_c *ExecutionPayload_GetFeeRecipient_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetFeeRecipient_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetFeeRecipient_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 common.ExecutionAddress) *ExecutionPayload_GetFeeRecipient_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetFeeRecipient_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() common.ExecutionAddress) *ExecutionPayload_GetFeeRecipient_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetGasLimit provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetGasLimit() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGasLimit")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayload_GetGasLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGasLimit'
type ExecutionPayload_GetGasLimit_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetGasLimit is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetGasLimit() *ExecutionPayload_GetGasLimit_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetGasLimit_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetGasLimit")}
}

func (_c *ExecutionPayload_GetGasLimit_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetGasLimit_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetGasLimit_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 math.U64) *ExecutionPayload_GetGasLimit_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetGasLimit_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() math.U64) *ExecutionPayload_GetGasLimit_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetGasUsed provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetGasUsed() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGasUsed")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayload_GetGasUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGasUsed'
type ExecutionPayload_GetGasUsed_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetGasUsed is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetGasUsed() *ExecutionPayload_GetGasUsed_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetGasUsed_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetGasUsed")}
}

func (_c *ExecutionPayload_GetGasUsed_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetGasUsed_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetGasUsed_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 math.U64) *ExecutionPayload_GetGasUsed_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetGasUsed_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() math.U64) *ExecutionPayload_GetGasUsed_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetLogsBloom provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetLogsBloom() bytes.B256 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogsBloom")
	}

	var r0 bytes.B256
	if rf, ok := ret.Get(0).(func() bytes.B256); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B256)
		}
	}

	return r0
}

// ExecutionPayload_GetLogsBloom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogsBloom'
type ExecutionPayload_GetLogsBloom_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetLogsBloom is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetLogsBloom() *ExecutionPayload_GetLogsBloom_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetLogsBloom_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetLogsBloom")}
}

func (_c *ExecutionPayload_GetLogsBloom_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetLogsBloom_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetLogsBloom_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 bytes.B256) *ExecutionPayload_GetLogsBloom_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetLogsBloom_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() bytes.B256) *ExecutionPayload_GetLogsBloom_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetNumber provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetNumber() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNumber")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayload_GetNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNumber'
type ExecutionPayload_GetNumber_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetNumber is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetNumber() *ExecutionPayload_GetNumber_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetNumber_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetNumber")}
}

func (_c *ExecutionPayload_GetNumber_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetNumber_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetNumber_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 math.U64) *ExecutionPayload_GetNumber_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetNumber_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() math.U64) *ExecutionPayload_GetNumber_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetParentHash provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetParentHash() common.ExecutionHash {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetParentHash")
	}

	var r0 common.ExecutionHash
	if rf, ok := ret.Get(0).(func() common.ExecutionHash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.ExecutionHash)
		}
	}

	return r0
}

// ExecutionPayload_GetParentHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentHash'
type ExecutionPayload_GetParentHash_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetParentHash is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetParentHash() *ExecutionPayload_GetParentHash_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetParentHash_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetParentHash")}
}

func (_c *ExecutionPayload_GetParentHash_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetParentHash_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetParentHash_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 common.ExecutionHash) *ExecutionPayload_GetParentHash_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetParentHash_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() common.ExecutionHash) *ExecutionPayload_GetParentHash_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetPrevRandao provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetPrevRandao() common.Bytes32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPrevRandao")
	}

	var r0 common.Bytes32
	if rf, ok := ret.Get(0).(func() common.Bytes32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Bytes32)
		}
	}

	return r0
}

// ExecutionPayload_GetPrevRandao_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrevRandao'
type ExecutionPayload_GetPrevRandao_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetPrevRandao is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetPrevRandao() *ExecutionPayload_GetPrevRandao_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetPrevRandao_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetPrevRandao")}
}

func (_c *ExecutionPayload_GetPrevRandao_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetPrevRandao_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetPrevRandao_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 common.Bytes32) *ExecutionPayload_GetPrevRandao_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetPrevRandao_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() common.Bytes32) *ExecutionPayload_GetPrevRandao_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetReceiptsRoot provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetReceiptsRoot() common.Bytes32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReceiptsRoot")
	}

	var r0 common.Bytes32
	if rf, ok := ret.Get(0).(func() common.Bytes32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Bytes32)
		}
	}

	return r0
}

// ExecutionPayload_GetReceiptsRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReceiptsRoot'
type ExecutionPayload_GetReceiptsRoot_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetReceiptsRoot is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetReceiptsRoot() *ExecutionPayload_GetReceiptsRoot_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetReceiptsRoot_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetReceiptsRoot")}
}

func (_c *ExecutionPayload_GetReceiptsRoot_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetReceiptsRoot_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetReceiptsRoot_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 common.Bytes32) *ExecutionPayload_GetReceiptsRoot_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetReceiptsRoot_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() common.Bytes32) *ExecutionPayload_GetReceiptsRoot_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetStateRoot provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetStateRoot() common.Bytes32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStateRoot")
	}

	var r0 common.Bytes32
	if rf, ok := ret.Get(0).(func() common.Bytes32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Bytes32)
		}
	}

	return r0
}

// ExecutionPayload_GetStateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateRoot'
type ExecutionPayload_GetStateRoot_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetStateRoot is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetStateRoot() *ExecutionPayload_GetStateRoot_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetStateRoot_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetStateRoot")}
}

func (_c *ExecutionPayload_GetStateRoot_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetStateRoot_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetStateRoot_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 common.Bytes32) *ExecutionPayload_GetStateRoot_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetStateRoot_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() common.Bytes32) *ExecutionPayload_GetStateRoot_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetTimestamp provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetTimestamp() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTimestamp")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayload_GetTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTimestamp'
type ExecutionPayload_GetTimestamp_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetTimestamp is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetTimestamp() *ExecutionPayload_GetTimestamp_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetTimestamp_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetTimestamp")}
}

func (_c *ExecutionPayload_GetTimestamp_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetTimestamp_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetTimestamp_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 math.U64) *ExecutionPayload_GetTimestamp_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetTimestamp_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() math.U64) *ExecutionPayload_GetTimestamp_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetTransactions provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetTransactions() engineprimitives.Transactions {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 engineprimitives.Transactions
	if rf, ok := ret.Get(0).(func() engineprimitives.Transactions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(engineprimitives.Transactions)
		}
	}

	return r0
}

// ExecutionPayload_GetTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactions'
type ExecutionPayload_GetTransactions_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetTransactions is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetTransactions() *ExecutionPayload_GetTransactions_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetTransactions_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetTransactions")}
}

func (_c *ExecutionPayload_GetTransactions_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetTransactions_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetTransactions_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 engineprimitives.Transactions) *ExecutionPayload_GetTransactions_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetTransactions_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() engineprimitives.Transactions) *ExecutionPayload_GetTransactions_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// GetWithdrawals provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetWithdrawals() WithdrawalsT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawals")
	}

	var r0 WithdrawalsT
	if rf, ok := ret.Get(0).(func() WithdrawalsT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(WithdrawalsT)
	}

	return r0
}

// ExecutionPayload_GetWithdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawals'
type ExecutionPayload_GetWithdrawals_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// GetWithdrawals is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) GetWithdrawals() *ExecutionPayload_GetWithdrawals_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_GetWithdrawals_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("GetWithdrawals")}
}

func (_c *ExecutionPayload_GetWithdrawals_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_GetWithdrawals_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_GetWithdrawals_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 WithdrawalsT) *ExecutionPayload_GetWithdrawals_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_GetWithdrawals_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() WithdrawalsT) *ExecutionPayload_GetWithdrawals_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// IsNil provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExecutionPayload_IsNil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNil'
type ExecutionPayload_IsNil_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// IsNil is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) IsNil() *ExecutionPayload_IsNil_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_IsNil_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("IsNil")}
}

func (_c *ExecutionPayload_IsNil_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_IsNil_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_IsNil_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 bool) *ExecutionPayload_IsNil_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_IsNil_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() bool) *ExecutionPayload_IsNil_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// MarshalJSON provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) MarshalJSON() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalJSON")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutionPayload_MarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalJSON'
type ExecutionPayload_MarshalJSON_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// MarshalJSON is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) MarshalJSON() *ExecutionPayload_MarshalJSON_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_MarshalJSON_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("MarshalJSON")}
}

func (_c *ExecutionPayload_MarshalJSON_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_MarshalJSON_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_MarshalJSON_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 []byte, _a1 error) *ExecutionPayload_MarshalJSON_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutionPayload_MarshalJSON_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() ([]byte, error)) *ExecutionPayload_MarshalJSON_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// ToHeader provides a mock function with given fields: maxWithdrawalsPerPayload, eth1ChainID
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) ToHeader(maxWithdrawalsPerPayload uint64, eth1ChainID uint64) (ExecutionPayloadHeaderT, error) {
	ret := _m.Called(maxWithdrawalsPerPayload, eth1ChainID)

	if len(ret) == 0 {
		panic("no return value specified for ToHeader")
	}

	var r0 ExecutionPayloadHeaderT
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) (ExecutionPayloadHeaderT, error)); ok {
		return rf(maxWithdrawalsPerPayload, eth1ChainID)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64) ExecutionPayloadHeaderT); ok {
		r0 = rf(maxWithdrawalsPerPayload, eth1ChainID)
	} else {
		r0 = ret.Get(0).(ExecutionPayloadHeaderT)
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(maxWithdrawalsPerPayload, eth1ChainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutionPayload_ToHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToHeader'
type ExecutionPayload_ToHeader_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// ToHeader is a helper method to define mock.On call
//   - maxWithdrawalsPerPayload uint64
//   - eth1ChainID uint64
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) ToHeader(maxWithdrawalsPerPayload interface{}, eth1ChainID interface{}) *ExecutionPayload_ToHeader_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_ToHeader_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("ToHeader", maxWithdrawalsPerPayload, eth1ChainID)}
}

func (_c *ExecutionPayload_ToHeader_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func(maxWithdrawalsPerPayload uint64, eth1ChainID uint64)) *ExecutionPayload_ToHeader_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64))
	})
	return _c
}

func (_c *ExecutionPayload_ToHeader_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 ExecutionPayloadHeaderT, _a1 error) *ExecutionPayload_ToHeader_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutionPayload_ToHeader_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func(uint64, uint64) (ExecutionPayloadHeaderT, error)) *ExecutionPayload_ToHeader_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// UnmarshalJSON provides a mock function with given fields: _a0
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) UnmarshalJSON(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecutionPayload_UnmarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalJSON'
type ExecutionPayload_UnmarshalJSON_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// UnmarshalJSON is a helper method to define mock.On call
//   - _a0 []byte
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) UnmarshalJSON(_a0 interface{}) *ExecutionPayload_UnmarshalJSON_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_UnmarshalJSON_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("UnmarshalJSON", _a0)}
}

func (_c *ExecutionPayload_UnmarshalJSON_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func(_a0 []byte)) *ExecutionPayload_UnmarshalJSON_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ExecutionPayload_UnmarshalJSON_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 error) *ExecutionPayload_UnmarshalJSON_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_UnmarshalJSON_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func([]byte) error) *ExecutionPayload_UnmarshalJSON_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields:
func (_m *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Version() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutionPayload_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type ExecutionPayload_Version_Call[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any] struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *ExecutionPayload_Expecter[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Version() *ExecutionPayload_Version_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	return &ExecutionPayload_Version_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{Call: _e.mock.On("Version")}
}

func (_c *ExecutionPayload_Version_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Run(run func()) *ExecutionPayload_Version_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayload_Version_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) Return(_a0 uint32) *ExecutionPayload_Version_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayload_Version_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]) RunAndReturn(run func() uint32) *ExecutionPayload_Version_Call[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	_c.Call.Return(run)
	return _c
}

// NewExecutionPayload creates a new instance of ExecutionPayload. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionPayload[ExecutionPayloadT any, ExecutionPayloadHeaderT any, WithdrawalsT any](t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT] {
	mock := &ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalsT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
